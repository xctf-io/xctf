// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: xctf/xctf.proto

package xctf

import (
	context "context"
	chalgen "github.com/xctf-io/xctf/gen/chalgen"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUserResponse, error)
	SubmitFlag(ctx context.Context, in *SubmitFlagRequest, opts ...grpc.CallOption) (*SubmitFlagResponse, error)
	SubmitEvidenceReport(ctx context.Context, in *SubmitEvidenceReportRequest, opts ...grpc.CallOption) (*SubmitEvidenceReportRequest, error)
	GetDiscoveredEvidence(ctx context.Context, in *GetDiscoveredEvidenceRequest, opts ...grpc.CallOption) (*GetDiscoveredEvidenceResponse, error)
	SubmitEvidence(ctx context.Context, in *SubmitEvidenceRequest, opts ...grpc.CallOption) (*SubmitEvidenceResponse, error)
	SubmitEvidenceConnection(ctx context.Context, in *SubmitEvidenceConnectionRequest, opts ...grpc.CallOption) (*SubmitEvidenceConnectionResponse, error)
	GetHomePage(ctx context.Context, in *GetHomePageRequest, opts ...grpc.CallOption) (*GetHomePageResponse, error)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	SubmitWriteup(ctx context.Context, in *SubmitWriteupRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserWriteup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserWriteupResponse, error)
	GetCompetitions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*chalgen.CompetitionList, error)
	UpdateCompetition(ctx context.Context, in *chalgen.Competition, opts ...grpc.CallOption) (*chalgen.Competition, error)
	DeleteCompetition(ctx context.Context, in *chalgen.Competition, opts ...grpc.CallOption) (*Empty, error)
	ChallengeType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChallengeTypeResponse, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Backend/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUserResponse, error) {
	out := new(CurrentUserResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/CurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) SubmitFlag(ctx context.Context, in *SubmitFlagRequest, opts ...grpc.CallOption) (*SubmitFlagResponse, error) {
	out := new(SubmitFlagResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/SubmitFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) SubmitEvidenceReport(ctx context.Context, in *SubmitEvidenceReportRequest, opts ...grpc.CallOption) (*SubmitEvidenceReportRequest, error) {
	out := new(SubmitEvidenceReportRequest)
	err := c.cc.Invoke(ctx, "/xctf.Backend/SubmitEvidenceReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetDiscoveredEvidence(ctx context.Context, in *GetDiscoveredEvidenceRequest, opts ...grpc.CallOption) (*GetDiscoveredEvidenceResponse, error) {
	out := new(GetDiscoveredEvidenceResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/GetDiscoveredEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) SubmitEvidence(ctx context.Context, in *SubmitEvidenceRequest, opts ...grpc.CallOption) (*SubmitEvidenceResponse, error) {
	out := new(SubmitEvidenceResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/SubmitEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) SubmitEvidenceConnection(ctx context.Context, in *SubmitEvidenceConnectionRequest, opts ...grpc.CallOption) (*SubmitEvidenceConnectionResponse, error) {
	out := new(SubmitEvidenceConnectionResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/SubmitEvidenceConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetHomePage(ctx context.Context, in *GetHomePageRequest, opts ...grpc.CallOption) (*GetHomePageResponse, error) {
	out := new(GetHomePageResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/GetHomePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Backend/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) SubmitWriteup(ctx context.Context, in *SubmitWriteupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Backend/SubmitWriteup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetUserWriteup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserWriteupResponse, error) {
	out := new(GetUserWriteupResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/GetUserWriteup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetCompetitions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*chalgen.CompetitionList, error) {
	out := new(chalgen.CompetitionList)
	err := c.cc.Invoke(ctx, "/xctf.Backend/GetCompetitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) UpdateCompetition(ctx context.Context, in *chalgen.Competition, opts ...grpc.CallOption) (*chalgen.Competition, error) {
	out := new(chalgen.Competition)
	err := c.cc.Invoke(ctx, "/xctf.Backend/UpdateCompetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) DeleteCompetition(ctx context.Context, in *chalgen.Competition, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Backend/DeleteCompetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) ChallengeType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChallengeTypeResponse, error) {
	out := new(ChallengeTypeResponse)
	err := c.cc.Invoke(ctx, "/xctf.Backend/ChallengeType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
// All implementations should embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *Empty) (*Empty, error)
	CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserResponse, error)
	SubmitFlag(context.Context, *SubmitFlagRequest) (*SubmitFlagResponse, error)
	SubmitEvidenceReport(context.Context, *SubmitEvidenceReportRequest) (*SubmitEvidenceReportRequest, error)
	GetDiscoveredEvidence(context.Context, *GetDiscoveredEvidenceRequest) (*GetDiscoveredEvidenceResponse, error)
	SubmitEvidence(context.Context, *SubmitEvidenceRequest) (*SubmitEvidenceResponse, error)
	SubmitEvidenceConnection(context.Context, *SubmitEvidenceConnectionRequest) (*SubmitEvidenceConnectionResponse, error)
	GetHomePage(context.Context, *GetHomePageRequest) (*GetHomePageResponse, error)
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*Empty, error)
	SubmitWriteup(context.Context, *SubmitWriteupRequest) (*Empty, error)
	GetUserWriteup(context.Context, *Empty) (*GetUserWriteupResponse, error)
	GetCompetitions(context.Context, *Empty) (*chalgen.CompetitionList, error)
	UpdateCompetition(context.Context, *chalgen.Competition) (*chalgen.Competition, error)
	DeleteCompetition(context.Context, *chalgen.Competition) (*Empty, error)
	ChallengeType(context.Context, *Empty) (*ChallengeTypeResponse, error)
}

// UnimplementedBackendServer should be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBackendServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBackendServer) Logout(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedBackendServer) CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedBackendServer) SubmitFlag(context.Context, *SubmitFlagRequest) (*SubmitFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFlag not implemented")
}
func (UnimplementedBackendServer) SubmitEvidenceReport(context.Context, *SubmitEvidenceReportRequest) (*SubmitEvidenceReportRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEvidenceReport not implemented")
}
func (UnimplementedBackendServer) GetDiscoveredEvidence(context.Context, *GetDiscoveredEvidenceRequest) (*GetDiscoveredEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveredEvidence not implemented")
}
func (UnimplementedBackendServer) SubmitEvidence(context.Context, *SubmitEvidenceRequest) (*SubmitEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEvidence not implemented")
}
func (UnimplementedBackendServer) SubmitEvidenceConnection(context.Context, *SubmitEvidenceConnectionRequest) (*SubmitEvidenceConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEvidenceConnection not implemented")
}
func (UnimplementedBackendServer) GetHomePage(context.Context, *GetHomePageRequest) (*GetHomePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomePage not implemented")
}
func (UnimplementedBackendServer) ForgotPassword(context.Context, *ForgotPasswordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedBackendServer) SubmitWriteup(context.Context, *SubmitWriteupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWriteup not implemented")
}
func (UnimplementedBackendServer) GetUserWriteup(context.Context, *Empty) (*GetUserWriteupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWriteup not implemented")
}
func (UnimplementedBackendServer) GetCompetitions(context.Context, *Empty) (*chalgen.CompetitionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetitions not implemented")
}
func (UnimplementedBackendServer) UpdateCompetition(context.Context, *chalgen.Competition) (*chalgen.Competition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompetition not implemented")
}
func (UnimplementedBackendServer) DeleteCompetition(context.Context, *chalgen.Competition) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompetition not implemented")
}
func (UnimplementedBackendServer) ChallengeType(context.Context, *Empty) (*ChallengeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeType not implemented")
}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/CurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CurrentUser(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_SubmitFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).SubmitFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/SubmitFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).SubmitFlag(ctx, req.(*SubmitFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_SubmitEvidenceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitEvidenceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).SubmitEvidenceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/SubmitEvidenceReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).SubmitEvidenceReport(ctx, req.(*SubmitEvidenceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetDiscoveredEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveredEvidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetDiscoveredEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/GetDiscoveredEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetDiscoveredEvidence(ctx, req.(*GetDiscoveredEvidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_SubmitEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitEvidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).SubmitEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/SubmitEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).SubmitEvidence(ctx, req.(*SubmitEvidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_SubmitEvidenceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitEvidenceConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).SubmitEvidenceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/SubmitEvidenceConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).SubmitEvidenceConnection(ctx, req.(*SubmitEvidenceConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetHomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetHomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/GetHomePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetHomePage(ctx, req.(*GetHomePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_SubmitWriteup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitWriteupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).SubmitWriteup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/SubmitWriteup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).SubmitWriteup(ctx, req.(*SubmitWriteupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetUserWriteup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetUserWriteup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/GetUserWriteup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetUserWriteup(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetCompetitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetCompetitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/GetCompetitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetCompetitions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_UpdateCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chalgen.Competition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).UpdateCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/UpdateCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).UpdateCompetition(ctx, req.(*chalgen.Competition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_DeleteCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chalgen.Competition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).DeleteCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/DeleteCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).DeleteCompetition(ctx, req.(*chalgen.Competition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_ChallengeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).ChallengeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Backend/ChallengeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).ChallengeType(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xctf.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Backend_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Backend_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Backend_Logout_Handler,
		},
		{
			MethodName: "CurrentUser",
			Handler:    _Backend_CurrentUser_Handler,
		},
		{
			MethodName: "SubmitFlag",
			Handler:    _Backend_SubmitFlag_Handler,
		},
		{
			MethodName: "SubmitEvidenceReport",
			Handler:    _Backend_SubmitEvidenceReport_Handler,
		},
		{
			MethodName: "GetDiscoveredEvidence",
			Handler:    _Backend_GetDiscoveredEvidence_Handler,
		},
		{
			MethodName: "SubmitEvidence",
			Handler:    _Backend_SubmitEvidence_Handler,
		},
		{
			MethodName: "SubmitEvidenceConnection",
			Handler:    _Backend_SubmitEvidenceConnection_Handler,
		},
		{
			MethodName: "GetHomePage",
			Handler:    _Backend_GetHomePage_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _Backend_ForgotPassword_Handler,
		},
		{
			MethodName: "SubmitWriteup",
			Handler:    _Backend_SubmitWriteup_Handler,
		},
		{
			MethodName: "GetUserWriteup",
			Handler:    _Backend_GetUserWriteup_Handler,
		},
		{
			MethodName: "GetCompetitions",
			Handler:    _Backend_GetCompetitions_Handler,
		},
		{
			MethodName: "UpdateCompetition",
			Handler:    _Backend_UpdateCompetition_Handler,
		},
		{
			MethodName: "DeleteCompetition",
			Handler:    _Backend_DeleteCompetition_Handler,
		},
		{
			MethodName: "ChallengeType",
			Handler:    _Backend_ChallengeType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xctf/xctf.proto",
}

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	UpsertChallenge(ctx context.Context, in *UpsertChallengeRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteChallenge(ctx context.Context, in *DeleteChallengeRequest, opts ...grpc.CallOption) (*Empty, error)
	GetTeamsProgress(ctx context.Context, in *GetTeamsProgressRequest, opts ...grpc.CallOption) (*GetTeamsProgressResponse, error)
	GetAllChallenges(ctx context.Context, in *GetAllChallengesRequest, opts ...grpc.CallOption) (*GetAllChallengesResponse, error)
	SetHomePage(ctx context.Context, in *SetHomePageRequest, opts ...grpc.CallOption) (*Empty, error)
	GetWriteup(ctx context.Context, in *GetWriteupRequest, opts ...grpc.CallOption) (*GetWriteupResponse, error)
	SubmitGrade(ctx context.Context, in *SubmitGradeRequest, opts ...grpc.CallOption) (*Empty, error)
	SubmitComment(ctx context.Context, in *SubmitCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	GetUserGraph(ctx context.Context, in *GetUserGraphRequest, opts ...grpc.CallOption) (*GetUserGraphResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) UpsertChallenge(ctx context.Context, in *UpsertChallengeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Admin/UpsertChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteChallenge(ctx context.Context, in *DeleteChallengeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Admin/DeleteChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetTeamsProgress(ctx context.Context, in *GetTeamsProgressRequest, opts ...grpc.CallOption) (*GetTeamsProgressResponse, error) {
	out := new(GetTeamsProgressResponse)
	err := c.cc.Invoke(ctx, "/xctf.Admin/GetTeamsProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAllChallenges(ctx context.Context, in *GetAllChallengesRequest, opts ...grpc.CallOption) (*GetAllChallengesResponse, error) {
	out := new(GetAllChallengesResponse)
	err := c.cc.Invoke(ctx, "/xctf.Admin/GetAllChallenges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetHomePage(ctx context.Context, in *SetHomePageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Admin/SetHomePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetWriteup(ctx context.Context, in *GetWriteupRequest, opts ...grpc.CallOption) (*GetWriteupResponse, error) {
	out := new(GetWriteupResponse)
	err := c.cc.Invoke(ctx, "/xctf.Admin/GetWriteup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SubmitGrade(ctx context.Context, in *SubmitGradeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Admin/SubmitGrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SubmitComment(ctx context.Context, in *SubmitCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/xctf.Admin/SubmitComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, "/xctf.Admin/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserGraph(ctx context.Context, in *GetUserGraphRequest, opts ...grpc.CallOption) (*GetUserGraphResponse, error) {
	out := new(GetUserGraphResponse)
	err := c.cc.Invoke(ctx, "/xctf.Admin/GetUserGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations should embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	UpsertChallenge(context.Context, *UpsertChallengeRequest) (*Empty, error)
	DeleteChallenge(context.Context, *DeleteChallengeRequest) (*Empty, error)
	GetTeamsProgress(context.Context, *GetTeamsProgressRequest) (*GetTeamsProgressResponse, error)
	GetAllChallenges(context.Context, *GetAllChallengesRequest) (*GetAllChallengesResponse, error)
	SetHomePage(context.Context, *SetHomePageRequest) (*Empty, error)
	GetWriteup(context.Context, *GetWriteupRequest) (*GetWriteupResponse, error)
	SubmitGrade(context.Context, *SubmitGradeRequest) (*Empty, error)
	SubmitComment(context.Context, *SubmitCommentRequest) (*Empty, error)
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	GetUserGraph(context.Context, *GetUserGraphRequest) (*GetUserGraphResponse, error)
}

// UnimplementedAdminServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) UpsertChallenge(context.Context, *UpsertChallengeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertChallenge not implemented")
}
func (UnimplementedAdminServer) DeleteChallenge(context.Context, *DeleteChallengeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChallenge not implemented")
}
func (UnimplementedAdminServer) GetTeamsProgress(context.Context, *GetTeamsProgressRequest) (*GetTeamsProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsProgress not implemented")
}
func (UnimplementedAdminServer) GetAllChallenges(context.Context, *GetAllChallengesRequest) (*GetAllChallengesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChallenges not implemented")
}
func (UnimplementedAdminServer) SetHomePage(context.Context, *SetHomePageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomePage not implemented")
}
func (UnimplementedAdminServer) GetWriteup(context.Context, *GetWriteupRequest) (*GetWriteupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteup not implemented")
}
func (UnimplementedAdminServer) SubmitGrade(context.Context, *SubmitGradeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGrade not implemented")
}
func (UnimplementedAdminServer) SubmitComment(context.Context, *SubmitCommentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitComment not implemented")
}
func (UnimplementedAdminServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedAdminServer) GetUserGraph(context.Context, *GetUserGraphRequest) (*GetUserGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGraph not implemented")
}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_UpsertChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpsertChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/UpsertChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpsertChallenge(ctx, req.(*UpsertChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/DeleteChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteChallenge(ctx, req.(*DeleteChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetTeamsProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetTeamsProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/GetTeamsProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetTeamsProgress(ctx, req.(*GetTeamsProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAllChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChallengesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAllChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/GetAllChallenges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAllChallenges(ctx, req.(*GetAllChallengesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetHomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHomePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetHomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/SetHomePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetHomePage(ctx, req.(*SetHomePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetWriteup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetWriteup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/GetWriteup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetWriteup(ctx, req.(*GetWriteupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SubmitGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SubmitGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/SubmitGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SubmitGrade(ctx, req.(*SubmitGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SubmitComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SubmitComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/SubmitComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SubmitComment(ctx, req.(*SubmitCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xctf.Admin/GetUserGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserGraph(ctx, req.(*GetUserGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xctf.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertChallenge",
			Handler:    _Admin_UpsertChallenge_Handler,
		},
		{
			MethodName: "DeleteChallenge",
			Handler:    _Admin_DeleteChallenge_Handler,
		},
		{
			MethodName: "GetTeamsProgress",
			Handler:    _Admin_GetTeamsProgress_Handler,
		},
		{
			MethodName: "GetAllChallenges",
			Handler:    _Admin_GetAllChallenges_Handler,
		},
		{
			MethodName: "SetHomePage",
			Handler:    _Admin_SetHomePage_Handler,
		},
		{
			MethodName: "GetWriteup",
			Handler:    _Admin_GetWriteup_Handler,
		},
		{
			MethodName: "SubmitGrade",
			Handler:    _Admin_SubmitGrade_Handler,
		},
		{
			MethodName: "SubmitComment",
			Handler:    _Admin_SubmitComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Admin_GetComments_Handler,
		},
		{
			MethodName: "GetUserGraph",
			Handler:    _Admin_GetUserGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xctf/xctf.proto",
}
