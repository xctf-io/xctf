// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalgen/chalgen.proto

package chalgenconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	chalgen "github.com/xctf-io/xctf/gen/chalgen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChalgenServiceName is the fully-qualified name of the ChalgenService service.
	ChalgenServiceName = "chalgen.ChalgenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChalgenServiceGenerateProcedure is the fully-qualified name of the ChalgenService's Generate RPC.
	ChalgenServiceGenerateProcedure = "/chalgen.ChalgenService/Generate"
)

// ChalgenServiceClient is a client for the chalgen.ChalgenService service.
type ChalgenServiceClient interface {
	Generate(context.Context, *connect_go.Request[chalgen.GenerateRequest]) (*connect_go.Response[chalgen.GenerateResponse], error)
}

// NewChalgenServiceClient constructs a client for the chalgen.ChalgenService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChalgenServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChalgenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chalgenServiceClient{
		generate: connect_go.NewClient[chalgen.GenerateRequest, chalgen.GenerateResponse](
			httpClient,
			baseURL+ChalgenServiceGenerateProcedure,
			opts...,
		),
	}
}

// chalgenServiceClient implements ChalgenServiceClient.
type chalgenServiceClient struct {
	generate *connect_go.Client[chalgen.GenerateRequest, chalgen.GenerateResponse]
}

// Generate calls chalgen.ChalgenService.Generate.
func (c *chalgenServiceClient) Generate(ctx context.Context, req *connect_go.Request[chalgen.GenerateRequest]) (*connect_go.Response[chalgen.GenerateResponse], error) {
	return c.generate.CallUnary(ctx, req)
}

// ChalgenServiceHandler is an implementation of the chalgen.ChalgenService service.
type ChalgenServiceHandler interface {
	Generate(context.Context, *connect_go.Request[chalgen.GenerateRequest]) (*connect_go.Response[chalgen.GenerateResponse], error)
}

// NewChalgenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChalgenServiceHandler(svc ChalgenServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	chalgenServiceGenerateHandler := connect_go.NewUnaryHandler(
		ChalgenServiceGenerateProcedure,
		svc.Generate,
		opts...,
	)
	return "/chalgen.ChalgenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChalgenServiceGenerateProcedure:
			chalgenServiceGenerateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChalgenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChalgenServiceHandler struct{}

func (UnimplementedChalgenServiceHandler) Generate(context.Context, *connect_go.Request[chalgen.GenerateRequest]) (*connect_go.Response[chalgen.GenerateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chalgen.ChalgenService.Generate is not implemented"))
}
