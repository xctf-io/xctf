package tmpl

import (
    "fmt"
    "time"
	"github.com/xctf-io/xctf/pkg/gen/chalgen"
)

type SessionState struct {
    User *chalgen.User
}

type ChatState struct {
    URL ChatURL
    Session SessionState
    Channel chalgen.Channel
    UserLookup map[string]*chalgen.User
}

type ChatURL struct {
  Channel func(int) templ.SafeURL
  Login templ.SafeURL
  Logout templ.SafeURL
}

templ Page(contents templ.Component) {
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>play</title>
        <!--<link href="https://cdn.jsdelivr.net/npm/daisyui@4.7.2/dist/full.min.css" rel="stylesheet" type="text/css" />-->
        <!--<script src="https://cdn.tailwindcss.com"></script>-->
        <link href="/build/daisyui.min.css" rel="stylesheet" type="text/css" />
        <script src="/build/tailwindcss.js"></script>
      </head>
      <body class="bg-gray-900">
          @contents
      </body>
    </html>
}

script openModal(id string) {
    document.getElementById(id).showModal();
}

templ Chat(state ChatState, slack *chalgen.Slack) {
    <div class="flex flex-col h-screen">
        <div class="navbar bg-base-100">
          <div class="flex-1">
            <a class="btn btn-ghost text-xl">slick</a>
          </div>
          <div class="flex-none">
            <ul class="menu menu-horizontal px-1 space-x-2">
              if state.Session.User != nil {
                  <li><button onclick="my_modal_2.showModal()">{ state.Session.User.Username }</button></li>
                  <dialog id="my_modal_2" class="modal">
                    <div class="modal-box">
                    { state.Session.User.Bio }
                    </div>
                    <form method="dialog" class="modal-backdrop">
                      <button>close</button>
                    </form>
                  </dialog>
                  <li><a href={ state.URL.Logout }>logout</a></li>
              } else {
                  <li><button onclick="login_modal.showModal()">login</button></li>
              }
              <dialog id="login_modal" class="modal">
                <div class="modal-box">
                  <form class="space-y-2" method="POST" action={state.URL.Login}>
                      <label class="input input-bordered flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70"><path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6ZM12.735 14c.618 0 1.093-.561.872-1.139a6.002 6.002 0 0 0-11.215 0c-.22.578.254 1.139.872 1.139h9.47Z" /></svg>
                        <input type="text" name="username" class="grow" placeholder="Username" />
                      </label>
                      <label class="input input-bordered flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70"><path fill-rule="evenodd" d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z" clip-rule="evenodd" /></svg>
                        <input type="password" name="password" class="grow" />
                      </label>
                      <button type="submit" class="btn">login</button>
                  </form>
                  <div class="modal-action">
                    <form method="dialog">
                      <button class="btn">close</button>
                    </form>
                  </div>
                </div>
              </dialog>
            </ul>
          </div>
        </div>
        <div class="flex">
      <div class="w-32 bg-gray-800 text-white flex flex-col">
        <div class="px-4 py-6">
          <h2 class="text-xl font-semibold">Channels</h2>
          <ul class="mt-6">
          for i, c := range slack.Channels {
            <li class="mt-2">
              <a href={state.URL.Channel(i)} class="flex items-center space-x-2 px-4 py-2 bg-gray-900 rounded-md">
                <span>{ c.Name }</span>
              </a>
            </li>
          }
          </ul>
        </div>
      </div>

      <div class="flex-1 overflow-y-auto text-white">
        <div class="px-4 py-6">
          <h1 class="text-3xl font-semibold">{state.Channel.Name}</h1>
          <p class="mt-4">
          for i, m := range state.Channel.Messages {
          <div class="flex items-start space-x-4">
            <div class="flex-shrink-0">
              <img class="h-10 w-10 rounded-full" src="https://via.placeholder.com/40" alt="User avatar" />
            </div>
            <div>
              <div onclick={openModal(fmt.Sprintf("msg_bio_modal_%d", i))} class="pointer-cursor text-sm text-gray-700">
              { m.Username }
              </div>
              <dialog id={fmt.Sprintf("msg_bio_modal_%d", i)} class="modal">
                <div class="modal-box">
                { state.UserLookup[m.Username].Bio }
                </div>
                <form method="dialog" class="modal-backdrop">
                  <button>close</button>
                </form>
              </dialog>
              <div class="mt-1 text-sm font-medium  ">
              { m.Content }
              </div>
              <div class="text-sm text-gray-700">{ time.Unix(m.Timestamp, 0).Format(time.ANSIC) }</div>
            </div>
          </div>
          }
          </p>
        </div>
      </div>
        </div>
    </div>
}
