package tmpl

import (
	"github.com/xctf-io/xctf/pkg/gen/chalgen"
	"fmt"
  "time"
)

type PhoneState struct {
  Flag string
  TrackerLogin templ.SafeURL
  TrackerAuthed bool
}

script openApp(id string) {
    document.getElementById(id).showModal();
}

script toggleWidth(id string) {
  document.getElementById(id).classList.toggle("w-full");
}

templ App(state PhoneState, i int, a *chalgen.App) {
    switch t := a.Type.(type) {
    case *chalgen.App_Photogallery:
        <div class="flex flex-col items-center">
            <h1 class="text-2xl font-bold">{a.Name}</h1>
            <div class="carousel carousel-center max-w-md p-4 space-x-4 bg-neutral rounded-box">
                for j, p := range t.Photogallery.Url {
                    <div onclick={toggleWidth(fmt.Sprintf("photo_%d_%d", i, j))} id={fmt.Sprintf("photo_%d_%d", i, j)} class="carousel-item relative w-64 h-96 overflow-hidden">
                      <img src={p} class="rounded-box min-w-full min-h-full object-cover top-1/2 transform" />
                    </div>
                }
            </div>
        </div>
    case *chalgen.App_Tracker:
        if state.TrackerAuthed {
          <div class="flex flex-col items-center">
              <h1 class="text-2xl font-bold">{a.Name}</h1>
              <ul class="timeline timeline-vertical">
                  for _, e := range t.Tracker.Event {
                      <li>
                          <div class="timeline-start">{time.Unix(e.Timestamp, 0).Format(time.RFC822)}</div>
                          <div class="timeline-middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd" /></svg></div>
                          <div class="timeline-end timeline-box">{e.Name}</div>
                      </li>
                  }
              </ul>
          </div>
        } else {
          <p>enter your fingerprint</p>
          <form class="space-y-2" method="POST" action={state.TrackerLogin}>
              <label class="input input-bordered flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70"><path fill-rule="evenodd" d="M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z" clip-rule="evenodd" /></svg>
                <input type="password" name="password" class="grow" />
              </label>
              <button type="submit" class="btn">login</button>
          </form>
        }
      default:
        if a.Html != "" {
          @templ.Raw(a.Html)
        } else {
          <iframe src={a.Url} class="w-full h-96"></iframe>
        }
    }
}

templ Phone(state PhoneState, phone *chalgen.Phone) {
    <div class="flex h-screen flex-col space-y-4">
        <div class="mockup-phone overflow-y-scroll h-fit">
          <div class="camera"></div>
          <div class="display overflow-y-scroll">
            <div class="artboard artboard-demo phone-1 overflow-y-scroll">
                <div class="flex flex-col items-center space-y-12">
                    <h1 class="text-2xl font-bold">{phone.Name}</h1>
                    <div class="grid grid-cols-3 gap-4">
                      for i, a := range phone.Apps {
                        <a onclick={openApp(fmt.Sprintf("my_modal_%d", i))} class="btn w-20 h-20 bg-blue-500 flex justify-center items-center text-white">
                            {a.Name}
                        </a>
                        <dialog id={fmt.Sprintf("my_modal_%d", i)} class="modal">
                          <div class="modal-box">
                            @App(state, i, a)
                            <div class="modal-action">
                              <form method="dialog">
                                <button class="btn">Close</button>
                              </form>
                            </div>
                          </div>
                        </dialog>
                      }
                    </div>
                </div>
            </div>
          </div>
        </div>
        <div class="text-center">
          <p>{state.Flag}</p>
        </div>
    </div>
}
