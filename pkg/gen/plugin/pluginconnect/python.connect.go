// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plugin/python.proto

package pluginconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	plugin "github.com/xctf-io/xctf/pkg/gen/plugin"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PythonServiceName is the fully-qualified name of the PythonService service.
	PythonServiceName = "plugin.PythonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PythonServiceGenerateProcedure is the fully-qualified name of the PythonService's Generate RPC.
	PythonServiceGenerateProcedure = "/plugin.PythonService/Generate"
)

// PythonServiceClient is a client for the plugin.PythonService service.
type PythonServiceClient interface {
	Generate(context.Context, *connect_go.Request[plugin.GenerateRequest]) (*connect_go.Response[plugin.GenerateResponse], error)
}

// NewPythonServiceClient constructs a client for the plugin.PythonService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPythonServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PythonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pythonServiceClient{
		generate: connect_go.NewClient[plugin.GenerateRequest, plugin.GenerateResponse](
			httpClient,
			baseURL+PythonServiceGenerateProcedure,
			opts...,
		),
	}
}

// pythonServiceClient implements PythonServiceClient.
type pythonServiceClient struct {
	generate *connect_go.Client[plugin.GenerateRequest, plugin.GenerateResponse]
}

// Generate calls plugin.PythonService.Generate.
func (c *pythonServiceClient) Generate(ctx context.Context, req *connect_go.Request[plugin.GenerateRequest]) (*connect_go.Response[plugin.GenerateResponse], error) {
	return c.generate.CallUnary(ctx, req)
}

// PythonServiceHandler is an implementation of the plugin.PythonService service.
type PythonServiceHandler interface {
	Generate(context.Context, *connect_go.Request[plugin.GenerateRequest]) (*connect_go.Response[plugin.GenerateResponse], error)
}

// NewPythonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPythonServiceHandler(svc PythonServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	pythonServiceGenerateHandler := connect_go.NewUnaryHandler(
		PythonServiceGenerateProcedure,
		svc.Generate,
		opts...,
	)
	return "/plugin.PythonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PythonServiceGenerateProcedure:
			pythonServiceGenerateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPythonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPythonServiceHandler struct{}

func (UnimplementedPythonServiceHandler) Generate(context.Context, *connect_go.Request[plugin.GenerateRequest]) (*connect_go.Response[plugin.GenerateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("plugin.PythonService.Generate is not implemented"))
}
