// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: xctf/xctf.proto

package xctfconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	chalgen "github.com/xctf-io/xctf/pkg/gen/chalgen"
	xctf "github.com/xctf-io/xctf/pkg/gen/xctf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BackendName is the fully-qualified name of the Backend service.
	BackendName = "xctf.Backend"
	// AdminName is the fully-qualified name of the Admin service.
	AdminName = "xctf.Admin"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackendRegisterProcedure is the fully-qualified name of the Backend's Register RPC.
	BackendRegisterProcedure = "/xctf.Backend/Register"
	// BackendLoginProcedure is the fully-qualified name of the Backend's Login RPC.
	BackendLoginProcedure = "/xctf.Backend/Login"
	// BackendLogoutProcedure is the fully-qualified name of the Backend's Logout RPC.
	BackendLogoutProcedure = "/xctf.Backend/Logout"
	// BackendCurrentUserProcedure is the fully-qualified name of the Backend's CurrentUser RPC.
	BackendCurrentUserProcedure = "/xctf.Backend/CurrentUser"
	// BackendGetComputerProcedure is the fully-qualified name of the Backend's GetComputer RPC.
	BackendGetComputerProcedure = "/xctf.Backend/GetComputer"
	// BackendSubmitFlagProcedure is the fully-qualified name of the Backend's SubmitFlag RPC.
	BackendSubmitFlagProcedure = "/xctf.Backend/SubmitFlag"
	// BackendSubmitEvidenceReportProcedure is the fully-qualified name of the Backend's
	// SubmitEvidenceReport RPC.
	BackendSubmitEvidenceReportProcedure = "/xctf.Backend/SubmitEvidenceReport"
	// BackendGetDiscoveredEvidenceProcedure is the fully-qualified name of the Backend's
	// GetDiscoveredEvidence RPC.
	BackendGetDiscoveredEvidenceProcedure = "/xctf.Backend/GetDiscoveredEvidence"
	// BackendSubmitEvidenceProcedure is the fully-qualified name of the Backend's SubmitEvidence RPC.
	BackendSubmitEvidenceProcedure = "/xctf.Backend/SubmitEvidence"
	// BackendSubmitEvidenceConnectionProcedure is the fully-qualified name of the Backend's
	// SubmitEvidenceConnection RPC.
	BackendSubmitEvidenceConnectionProcedure = "/xctf.Backend/SubmitEvidenceConnection"
	// BackendGetHomePageProcedure is the fully-qualified name of the Backend's GetHomePage RPC.
	BackendGetHomePageProcedure = "/xctf.Backend/GetHomePage"
	// BackendForgotPasswordProcedure is the fully-qualified name of the Backend's ForgotPassword RPC.
	BackendForgotPasswordProcedure = "/xctf.Backend/ForgotPassword"
	// BackendSubmitWriteupProcedure is the fully-qualified name of the Backend's SubmitWriteup RPC.
	BackendSubmitWriteupProcedure = "/xctf.Backend/SubmitWriteup"
	// BackendGetUserWriteupProcedure is the fully-qualified name of the Backend's GetUserWriteup RPC.
	BackendGetUserWriteupProcedure = "/xctf.Backend/GetUserWriteup"
	// BackendGetCompetitionsProcedure is the fully-qualified name of the Backend's GetCompetitions RPC.
	BackendGetCompetitionsProcedure = "/xctf.Backend/GetCompetitions"
	// BackendUpdateCompetitionProcedure is the fully-qualified name of the Backend's UpdateCompetition
	// RPC.
	BackendUpdateCompetitionProcedure = "/xctf.Backend/UpdateCompetition"
	// BackendDeleteCompetitionProcedure is the fully-qualified name of the Backend's DeleteCompetition
	// RPC.
	BackendDeleteCompetitionProcedure = "/xctf.Backend/DeleteCompetition"
	// BackendChallengeTypeProcedure is the fully-qualified name of the Backend's ChallengeType RPC.
	BackendChallengeTypeProcedure = "/xctf.Backend/ChallengeType"
	// BackendSignedURLProcedure is the fully-qualified name of the Backend's SignedURL RPC.
	BackendSignedURLProcedure = "/xctf.Backend/SignedURL"
	// AdminUpsertChallengeProcedure is the fully-qualified name of the Admin's UpsertChallenge RPC.
	AdminUpsertChallengeProcedure = "/xctf.Admin/UpsertChallenge"
	// AdminDeleteChallengeProcedure is the fully-qualified name of the Admin's DeleteChallenge RPC.
	AdminDeleteChallengeProcedure = "/xctf.Admin/DeleteChallenge"
	// AdminGetTeamsProgressProcedure is the fully-qualified name of the Admin's GetTeamsProgress RPC.
	AdminGetTeamsProgressProcedure = "/xctf.Admin/GetTeamsProgress"
	// AdminGetAllChallengesProcedure is the fully-qualified name of the Admin's GetAllChallenges RPC.
	AdminGetAllChallengesProcedure = "/xctf.Admin/GetAllChallenges"
	// AdminSetHomePageProcedure is the fully-qualified name of the Admin's SetHomePage RPC.
	AdminSetHomePageProcedure = "/xctf.Admin/SetHomePage"
	// AdminGetWriteupProcedure is the fully-qualified name of the Admin's GetWriteup RPC.
	AdminGetWriteupProcedure = "/xctf.Admin/GetWriteup"
	// AdminSubmitGradeProcedure is the fully-qualified name of the Admin's SubmitGrade RPC.
	AdminSubmitGradeProcedure = "/xctf.Admin/SubmitGrade"
	// AdminSubmitCommentProcedure is the fully-qualified name of the Admin's SubmitComment RPC.
	AdminSubmitCommentProcedure = "/xctf.Admin/SubmitComment"
	// AdminGetCommentsProcedure is the fully-qualified name of the Admin's GetComments RPC.
	AdminGetCommentsProcedure = "/xctf.Admin/GetComments"
	// AdminGetUserGraphProcedure is the fully-qualified name of the Admin's GetUserGraph RPC.
	AdminGetUserGraphProcedure = "/xctf.Admin/GetUserGraph"
	// AdminSetComputerProcedure is the fully-qualified name of the Admin's SetComputer RPC.
	AdminSetComputerProcedure = "/xctf.Admin/SetComputer"
	// AdminExportChallengeProcedure is the fully-qualified name of the Admin's ExportChallenge RPC.
	AdminExportChallengeProcedure = "/xctf.Admin/ExportChallenge"
	// AdminImportChallengeProcedure is the fully-qualified name of the Admin's ImportChallenge RPC.
	AdminImportChallengeProcedure = "/xctf.Admin/ImportChallenge"
	// AdminReaddirProcedure is the fully-qualified name of the Admin's Readdir RPC.
	AdminReaddirProcedure = "/xctf.Admin/Readdir"
	// AdminRemoveProcedure is the fully-qualified name of the Admin's Remove RPC.
	AdminRemoveProcedure = "/xctf.Admin/Remove"
)

// BackendClient is a client for the xctf.Backend service.
type BackendClient interface {
	Register(context.Context, *connect_go.Request[xctf.RegisterRequest]) (*connect_go.Response[xctf.RegisterResponse], error)
	Login(context.Context, *connect_go.Request[xctf.LoginRequest]) (*connect_go.Response[xctf.LoginResponse], error)
	Logout(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.Empty], error)
	CurrentUser(context.Context, *connect_go.Request[xctf.CurrentUserRequest]) (*connect_go.Response[xctf.CurrentUserResponse], error)
	GetComputer(context.Context, *connect_go.Request[xctf.GetComputerRequest]) (*connect_go.Response[xctf.GetComputerResponse], error)
	SubmitFlag(context.Context, *connect_go.Request[xctf.SubmitFlagRequest]) (*connect_go.Response[xctf.SubmitFlagResponse], error)
	SubmitEvidenceReport(context.Context, *connect_go.Request[xctf.SubmitEvidenceReportRequest]) (*connect_go.Response[xctf.SubmitEvidenceReportRequest], error)
	GetDiscoveredEvidence(context.Context, *connect_go.Request[xctf.GetDiscoveredEvidenceRequest]) (*connect_go.Response[xctf.GetDiscoveredEvidenceResponse], error)
	SubmitEvidence(context.Context, *connect_go.Request[xctf.SubmitEvidenceRequest]) (*connect_go.Response[xctf.SubmitEvidenceResponse], error)
	SubmitEvidenceConnection(context.Context, *connect_go.Request[xctf.SubmitEvidenceConnectionRequest]) (*connect_go.Response[xctf.SubmitEvidenceConnectionResponse], error)
	GetHomePage(context.Context, *connect_go.Request[xctf.GetHomePageRequest]) (*connect_go.Response[xctf.GetHomePageResponse], error)
	ForgotPassword(context.Context, *connect_go.Request[xctf.ForgotPasswordRequest]) (*connect_go.Response[xctf.Empty], error)
	SubmitWriteup(context.Context, *connect_go.Request[xctf.SubmitWriteupRequest]) (*connect_go.Response[xctf.Empty], error)
	GetUserWriteup(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.GetUserWriteupResponse], error)
	GetCompetitions(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[chalgen.CompetitionList], error)
	UpdateCompetition(context.Context, *connect_go.Request[chalgen.Competition]) (*connect_go.Response[chalgen.Competition], error)
	DeleteCompetition(context.Context, *connect_go.Request[chalgen.Competition]) (*connect_go.Response[xctf.Empty], error)
	ChallengeType(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.ChallengeTypeResponse], error)
	SignedURL(context.Context, *connect_go.Request[xctf.SignedURLRequest]) (*connect_go.Response[xctf.SignedURLResponse], error)
}

// NewBackendClient constructs a client for the xctf.Backend service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackendClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BackendClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &backendClient{
		register: connect_go.NewClient[xctf.RegisterRequest, xctf.RegisterResponse](
			httpClient,
			baseURL+BackendRegisterProcedure,
			opts...,
		),
		login: connect_go.NewClient[xctf.LoginRequest, xctf.LoginResponse](
			httpClient,
			baseURL+BackendLoginProcedure,
			opts...,
		),
		logout: connect_go.NewClient[xctf.Empty, xctf.Empty](
			httpClient,
			baseURL+BackendLogoutProcedure,
			opts...,
		),
		currentUser: connect_go.NewClient[xctf.CurrentUserRequest, xctf.CurrentUserResponse](
			httpClient,
			baseURL+BackendCurrentUserProcedure,
			opts...,
		),
		getComputer: connect_go.NewClient[xctf.GetComputerRequest, xctf.GetComputerResponse](
			httpClient,
			baseURL+BackendGetComputerProcedure,
			opts...,
		),
		submitFlag: connect_go.NewClient[xctf.SubmitFlagRequest, xctf.SubmitFlagResponse](
			httpClient,
			baseURL+BackendSubmitFlagProcedure,
			opts...,
		),
		submitEvidenceReport: connect_go.NewClient[xctf.SubmitEvidenceReportRequest, xctf.SubmitEvidenceReportRequest](
			httpClient,
			baseURL+BackendSubmitEvidenceReportProcedure,
			opts...,
		),
		getDiscoveredEvidence: connect_go.NewClient[xctf.GetDiscoveredEvidenceRequest, xctf.GetDiscoveredEvidenceResponse](
			httpClient,
			baseURL+BackendGetDiscoveredEvidenceProcedure,
			opts...,
		),
		submitEvidence: connect_go.NewClient[xctf.SubmitEvidenceRequest, xctf.SubmitEvidenceResponse](
			httpClient,
			baseURL+BackendSubmitEvidenceProcedure,
			opts...,
		),
		submitEvidenceConnection: connect_go.NewClient[xctf.SubmitEvidenceConnectionRequest, xctf.SubmitEvidenceConnectionResponse](
			httpClient,
			baseURL+BackendSubmitEvidenceConnectionProcedure,
			opts...,
		),
		getHomePage: connect_go.NewClient[xctf.GetHomePageRequest, xctf.GetHomePageResponse](
			httpClient,
			baseURL+BackendGetHomePageProcedure,
			opts...,
		),
		forgotPassword: connect_go.NewClient[xctf.ForgotPasswordRequest, xctf.Empty](
			httpClient,
			baseURL+BackendForgotPasswordProcedure,
			opts...,
		),
		submitWriteup: connect_go.NewClient[xctf.SubmitWriteupRequest, xctf.Empty](
			httpClient,
			baseURL+BackendSubmitWriteupProcedure,
			opts...,
		),
		getUserWriteup: connect_go.NewClient[xctf.Empty, xctf.GetUserWriteupResponse](
			httpClient,
			baseURL+BackendGetUserWriteupProcedure,
			opts...,
		),
		getCompetitions: connect_go.NewClient[xctf.Empty, chalgen.CompetitionList](
			httpClient,
			baseURL+BackendGetCompetitionsProcedure,
			opts...,
		),
		updateCompetition: connect_go.NewClient[chalgen.Competition, chalgen.Competition](
			httpClient,
			baseURL+BackendUpdateCompetitionProcedure,
			opts...,
		),
		deleteCompetition: connect_go.NewClient[chalgen.Competition, xctf.Empty](
			httpClient,
			baseURL+BackendDeleteCompetitionProcedure,
			opts...,
		),
		challengeType: connect_go.NewClient[xctf.Empty, xctf.ChallengeTypeResponse](
			httpClient,
			baseURL+BackendChallengeTypeProcedure,
			opts...,
		),
		signedURL: connect_go.NewClient[xctf.SignedURLRequest, xctf.SignedURLResponse](
			httpClient,
			baseURL+BackendSignedURLProcedure,
			opts...,
		),
	}
}

// backendClient implements BackendClient.
type backendClient struct {
	register                 *connect_go.Client[xctf.RegisterRequest, xctf.RegisterResponse]
	login                    *connect_go.Client[xctf.LoginRequest, xctf.LoginResponse]
	logout                   *connect_go.Client[xctf.Empty, xctf.Empty]
	currentUser              *connect_go.Client[xctf.CurrentUserRequest, xctf.CurrentUserResponse]
	getComputer              *connect_go.Client[xctf.GetComputerRequest, xctf.GetComputerResponse]
	submitFlag               *connect_go.Client[xctf.SubmitFlagRequest, xctf.SubmitFlagResponse]
	submitEvidenceReport     *connect_go.Client[xctf.SubmitEvidenceReportRequest, xctf.SubmitEvidenceReportRequest]
	getDiscoveredEvidence    *connect_go.Client[xctf.GetDiscoveredEvidenceRequest, xctf.GetDiscoveredEvidenceResponse]
	submitEvidence           *connect_go.Client[xctf.SubmitEvidenceRequest, xctf.SubmitEvidenceResponse]
	submitEvidenceConnection *connect_go.Client[xctf.SubmitEvidenceConnectionRequest, xctf.SubmitEvidenceConnectionResponse]
	getHomePage              *connect_go.Client[xctf.GetHomePageRequest, xctf.GetHomePageResponse]
	forgotPassword           *connect_go.Client[xctf.ForgotPasswordRequest, xctf.Empty]
	submitWriteup            *connect_go.Client[xctf.SubmitWriteupRequest, xctf.Empty]
	getUserWriteup           *connect_go.Client[xctf.Empty, xctf.GetUserWriteupResponse]
	getCompetitions          *connect_go.Client[xctf.Empty, chalgen.CompetitionList]
	updateCompetition        *connect_go.Client[chalgen.Competition, chalgen.Competition]
	deleteCompetition        *connect_go.Client[chalgen.Competition, xctf.Empty]
	challengeType            *connect_go.Client[xctf.Empty, xctf.ChallengeTypeResponse]
	signedURL                *connect_go.Client[xctf.SignedURLRequest, xctf.SignedURLResponse]
}

// Register calls xctf.Backend.Register.
func (c *backendClient) Register(ctx context.Context, req *connect_go.Request[xctf.RegisterRequest]) (*connect_go.Response[xctf.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Login calls xctf.Backend.Login.
func (c *backendClient) Login(ctx context.Context, req *connect_go.Request[xctf.LoginRequest]) (*connect_go.Response[xctf.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls xctf.Backend.Logout.
func (c *backendClient) Logout(ctx context.Context, req *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.Empty], error) {
	return c.logout.CallUnary(ctx, req)
}

// CurrentUser calls xctf.Backend.CurrentUser.
func (c *backendClient) CurrentUser(ctx context.Context, req *connect_go.Request[xctf.CurrentUserRequest]) (*connect_go.Response[xctf.CurrentUserResponse], error) {
	return c.currentUser.CallUnary(ctx, req)
}

// GetComputer calls xctf.Backend.GetComputer.
func (c *backendClient) GetComputer(ctx context.Context, req *connect_go.Request[xctf.GetComputerRequest]) (*connect_go.Response[xctf.GetComputerResponse], error) {
	return c.getComputer.CallUnary(ctx, req)
}

// SubmitFlag calls xctf.Backend.SubmitFlag.
func (c *backendClient) SubmitFlag(ctx context.Context, req *connect_go.Request[xctf.SubmitFlagRequest]) (*connect_go.Response[xctf.SubmitFlagResponse], error) {
	return c.submitFlag.CallUnary(ctx, req)
}

// SubmitEvidenceReport calls xctf.Backend.SubmitEvidenceReport.
func (c *backendClient) SubmitEvidenceReport(ctx context.Context, req *connect_go.Request[xctf.SubmitEvidenceReportRequest]) (*connect_go.Response[xctf.SubmitEvidenceReportRequest], error) {
	return c.submitEvidenceReport.CallUnary(ctx, req)
}

// GetDiscoveredEvidence calls xctf.Backend.GetDiscoveredEvidence.
func (c *backendClient) GetDiscoveredEvidence(ctx context.Context, req *connect_go.Request[xctf.GetDiscoveredEvidenceRequest]) (*connect_go.Response[xctf.GetDiscoveredEvidenceResponse], error) {
	return c.getDiscoveredEvidence.CallUnary(ctx, req)
}

// SubmitEvidence calls xctf.Backend.SubmitEvidence.
func (c *backendClient) SubmitEvidence(ctx context.Context, req *connect_go.Request[xctf.SubmitEvidenceRequest]) (*connect_go.Response[xctf.SubmitEvidenceResponse], error) {
	return c.submitEvidence.CallUnary(ctx, req)
}

// SubmitEvidenceConnection calls xctf.Backend.SubmitEvidenceConnection.
func (c *backendClient) SubmitEvidenceConnection(ctx context.Context, req *connect_go.Request[xctf.SubmitEvidenceConnectionRequest]) (*connect_go.Response[xctf.SubmitEvidenceConnectionResponse], error) {
	return c.submitEvidenceConnection.CallUnary(ctx, req)
}

// GetHomePage calls xctf.Backend.GetHomePage.
func (c *backendClient) GetHomePage(ctx context.Context, req *connect_go.Request[xctf.GetHomePageRequest]) (*connect_go.Response[xctf.GetHomePageResponse], error) {
	return c.getHomePage.CallUnary(ctx, req)
}

// ForgotPassword calls xctf.Backend.ForgotPassword.
func (c *backendClient) ForgotPassword(ctx context.Context, req *connect_go.Request[xctf.ForgotPasswordRequest]) (*connect_go.Response[xctf.Empty], error) {
	return c.forgotPassword.CallUnary(ctx, req)
}

// SubmitWriteup calls xctf.Backend.SubmitWriteup.
func (c *backendClient) SubmitWriteup(ctx context.Context, req *connect_go.Request[xctf.SubmitWriteupRequest]) (*connect_go.Response[xctf.Empty], error) {
	return c.submitWriteup.CallUnary(ctx, req)
}

// GetUserWriteup calls xctf.Backend.GetUserWriteup.
func (c *backendClient) GetUserWriteup(ctx context.Context, req *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.GetUserWriteupResponse], error) {
	return c.getUserWriteup.CallUnary(ctx, req)
}

// GetCompetitions calls xctf.Backend.GetCompetitions.
func (c *backendClient) GetCompetitions(ctx context.Context, req *connect_go.Request[xctf.Empty]) (*connect_go.Response[chalgen.CompetitionList], error) {
	return c.getCompetitions.CallUnary(ctx, req)
}

// UpdateCompetition calls xctf.Backend.UpdateCompetition.
func (c *backendClient) UpdateCompetition(ctx context.Context, req *connect_go.Request[chalgen.Competition]) (*connect_go.Response[chalgen.Competition], error) {
	return c.updateCompetition.CallUnary(ctx, req)
}

// DeleteCompetition calls xctf.Backend.DeleteCompetition.
func (c *backendClient) DeleteCompetition(ctx context.Context, req *connect_go.Request[chalgen.Competition]) (*connect_go.Response[xctf.Empty], error) {
	return c.deleteCompetition.CallUnary(ctx, req)
}

// ChallengeType calls xctf.Backend.ChallengeType.
func (c *backendClient) ChallengeType(ctx context.Context, req *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.ChallengeTypeResponse], error) {
	return c.challengeType.CallUnary(ctx, req)
}

// SignedURL calls xctf.Backend.SignedURL.
func (c *backendClient) SignedURL(ctx context.Context, req *connect_go.Request[xctf.SignedURLRequest]) (*connect_go.Response[xctf.SignedURLResponse], error) {
	return c.signedURL.CallUnary(ctx, req)
}

// BackendHandler is an implementation of the xctf.Backend service.
type BackendHandler interface {
	Register(context.Context, *connect_go.Request[xctf.RegisterRequest]) (*connect_go.Response[xctf.RegisterResponse], error)
	Login(context.Context, *connect_go.Request[xctf.LoginRequest]) (*connect_go.Response[xctf.LoginResponse], error)
	Logout(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.Empty], error)
	CurrentUser(context.Context, *connect_go.Request[xctf.CurrentUserRequest]) (*connect_go.Response[xctf.CurrentUserResponse], error)
	GetComputer(context.Context, *connect_go.Request[xctf.GetComputerRequest]) (*connect_go.Response[xctf.GetComputerResponse], error)
	SubmitFlag(context.Context, *connect_go.Request[xctf.SubmitFlagRequest]) (*connect_go.Response[xctf.SubmitFlagResponse], error)
	SubmitEvidenceReport(context.Context, *connect_go.Request[xctf.SubmitEvidenceReportRequest]) (*connect_go.Response[xctf.SubmitEvidenceReportRequest], error)
	GetDiscoveredEvidence(context.Context, *connect_go.Request[xctf.GetDiscoveredEvidenceRequest]) (*connect_go.Response[xctf.GetDiscoveredEvidenceResponse], error)
	SubmitEvidence(context.Context, *connect_go.Request[xctf.SubmitEvidenceRequest]) (*connect_go.Response[xctf.SubmitEvidenceResponse], error)
	SubmitEvidenceConnection(context.Context, *connect_go.Request[xctf.SubmitEvidenceConnectionRequest]) (*connect_go.Response[xctf.SubmitEvidenceConnectionResponse], error)
	GetHomePage(context.Context, *connect_go.Request[xctf.GetHomePageRequest]) (*connect_go.Response[xctf.GetHomePageResponse], error)
	ForgotPassword(context.Context, *connect_go.Request[xctf.ForgotPasswordRequest]) (*connect_go.Response[xctf.Empty], error)
	SubmitWriteup(context.Context, *connect_go.Request[xctf.SubmitWriteupRequest]) (*connect_go.Response[xctf.Empty], error)
	GetUserWriteup(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.GetUserWriteupResponse], error)
	GetCompetitions(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[chalgen.CompetitionList], error)
	UpdateCompetition(context.Context, *connect_go.Request[chalgen.Competition]) (*connect_go.Response[chalgen.Competition], error)
	DeleteCompetition(context.Context, *connect_go.Request[chalgen.Competition]) (*connect_go.Response[xctf.Empty], error)
	ChallengeType(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.ChallengeTypeResponse], error)
	SignedURL(context.Context, *connect_go.Request[xctf.SignedURLRequest]) (*connect_go.Response[xctf.SignedURLResponse], error)
}

// NewBackendHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackendHandler(svc BackendHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	backendRegisterHandler := connect_go.NewUnaryHandler(
		BackendRegisterProcedure,
		svc.Register,
		opts...,
	)
	backendLoginHandler := connect_go.NewUnaryHandler(
		BackendLoginProcedure,
		svc.Login,
		opts...,
	)
	backendLogoutHandler := connect_go.NewUnaryHandler(
		BackendLogoutProcedure,
		svc.Logout,
		opts...,
	)
	backendCurrentUserHandler := connect_go.NewUnaryHandler(
		BackendCurrentUserProcedure,
		svc.CurrentUser,
		opts...,
	)
	backendGetComputerHandler := connect_go.NewUnaryHandler(
		BackendGetComputerProcedure,
		svc.GetComputer,
		opts...,
	)
	backendSubmitFlagHandler := connect_go.NewUnaryHandler(
		BackendSubmitFlagProcedure,
		svc.SubmitFlag,
		opts...,
	)
	backendSubmitEvidenceReportHandler := connect_go.NewUnaryHandler(
		BackendSubmitEvidenceReportProcedure,
		svc.SubmitEvidenceReport,
		opts...,
	)
	backendGetDiscoveredEvidenceHandler := connect_go.NewUnaryHandler(
		BackendGetDiscoveredEvidenceProcedure,
		svc.GetDiscoveredEvidence,
		opts...,
	)
	backendSubmitEvidenceHandler := connect_go.NewUnaryHandler(
		BackendSubmitEvidenceProcedure,
		svc.SubmitEvidence,
		opts...,
	)
	backendSubmitEvidenceConnectionHandler := connect_go.NewUnaryHandler(
		BackendSubmitEvidenceConnectionProcedure,
		svc.SubmitEvidenceConnection,
		opts...,
	)
	backendGetHomePageHandler := connect_go.NewUnaryHandler(
		BackendGetHomePageProcedure,
		svc.GetHomePage,
		opts...,
	)
	backendForgotPasswordHandler := connect_go.NewUnaryHandler(
		BackendForgotPasswordProcedure,
		svc.ForgotPassword,
		opts...,
	)
	backendSubmitWriteupHandler := connect_go.NewUnaryHandler(
		BackendSubmitWriteupProcedure,
		svc.SubmitWriteup,
		opts...,
	)
	backendGetUserWriteupHandler := connect_go.NewUnaryHandler(
		BackendGetUserWriteupProcedure,
		svc.GetUserWriteup,
		opts...,
	)
	backendGetCompetitionsHandler := connect_go.NewUnaryHandler(
		BackendGetCompetitionsProcedure,
		svc.GetCompetitions,
		opts...,
	)
	backendUpdateCompetitionHandler := connect_go.NewUnaryHandler(
		BackendUpdateCompetitionProcedure,
		svc.UpdateCompetition,
		opts...,
	)
	backendDeleteCompetitionHandler := connect_go.NewUnaryHandler(
		BackendDeleteCompetitionProcedure,
		svc.DeleteCompetition,
		opts...,
	)
	backendChallengeTypeHandler := connect_go.NewUnaryHandler(
		BackendChallengeTypeProcedure,
		svc.ChallengeType,
		opts...,
	)
	backendSignedURLHandler := connect_go.NewUnaryHandler(
		BackendSignedURLProcedure,
		svc.SignedURL,
		opts...,
	)
	return "/xctf.Backend/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackendRegisterProcedure:
			backendRegisterHandler.ServeHTTP(w, r)
		case BackendLoginProcedure:
			backendLoginHandler.ServeHTTP(w, r)
		case BackendLogoutProcedure:
			backendLogoutHandler.ServeHTTP(w, r)
		case BackendCurrentUserProcedure:
			backendCurrentUserHandler.ServeHTTP(w, r)
		case BackendGetComputerProcedure:
			backendGetComputerHandler.ServeHTTP(w, r)
		case BackendSubmitFlagProcedure:
			backendSubmitFlagHandler.ServeHTTP(w, r)
		case BackendSubmitEvidenceReportProcedure:
			backendSubmitEvidenceReportHandler.ServeHTTP(w, r)
		case BackendGetDiscoveredEvidenceProcedure:
			backendGetDiscoveredEvidenceHandler.ServeHTTP(w, r)
		case BackendSubmitEvidenceProcedure:
			backendSubmitEvidenceHandler.ServeHTTP(w, r)
		case BackendSubmitEvidenceConnectionProcedure:
			backendSubmitEvidenceConnectionHandler.ServeHTTP(w, r)
		case BackendGetHomePageProcedure:
			backendGetHomePageHandler.ServeHTTP(w, r)
		case BackendForgotPasswordProcedure:
			backendForgotPasswordHandler.ServeHTTP(w, r)
		case BackendSubmitWriteupProcedure:
			backendSubmitWriteupHandler.ServeHTTP(w, r)
		case BackendGetUserWriteupProcedure:
			backendGetUserWriteupHandler.ServeHTTP(w, r)
		case BackendGetCompetitionsProcedure:
			backendGetCompetitionsHandler.ServeHTTP(w, r)
		case BackendUpdateCompetitionProcedure:
			backendUpdateCompetitionHandler.ServeHTTP(w, r)
		case BackendDeleteCompetitionProcedure:
			backendDeleteCompetitionHandler.ServeHTTP(w, r)
		case BackendChallengeTypeProcedure:
			backendChallengeTypeHandler.ServeHTTP(w, r)
		case BackendSignedURLProcedure:
			backendSignedURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackendHandler returns CodeUnimplemented from all methods.
type UnimplementedBackendHandler struct{}

func (UnimplementedBackendHandler) Register(context.Context, *connect_go.Request[xctf.RegisterRequest]) (*connect_go.Response[xctf.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.Register is not implemented"))
}

func (UnimplementedBackendHandler) Login(context.Context, *connect_go.Request[xctf.LoginRequest]) (*connect_go.Response[xctf.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.Login is not implemented"))
}

func (UnimplementedBackendHandler) Logout(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.Logout is not implemented"))
}

func (UnimplementedBackendHandler) CurrentUser(context.Context, *connect_go.Request[xctf.CurrentUserRequest]) (*connect_go.Response[xctf.CurrentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.CurrentUser is not implemented"))
}

func (UnimplementedBackendHandler) GetComputer(context.Context, *connect_go.Request[xctf.GetComputerRequest]) (*connect_go.Response[xctf.GetComputerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.GetComputer is not implemented"))
}

func (UnimplementedBackendHandler) SubmitFlag(context.Context, *connect_go.Request[xctf.SubmitFlagRequest]) (*connect_go.Response[xctf.SubmitFlagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.SubmitFlag is not implemented"))
}

func (UnimplementedBackendHandler) SubmitEvidenceReport(context.Context, *connect_go.Request[xctf.SubmitEvidenceReportRequest]) (*connect_go.Response[xctf.SubmitEvidenceReportRequest], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.SubmitEvidenceReport is not implemented"))
}

func (UnimplementedBackendHandler) GetDiscoveredEvidence(context.Context, *connect_go.Request[xctf.GetDiscoveredEvidenceRequest]) (*connect_go.Response[xctf.GetDiscoveredEvidenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.GetDiscoveredEvidence is not implemented"))
}

func (UnimplementedBackendHandler) SubmitEvidence(context.Context, *connect_go.Request[xctf.SubmitEvidenceRequest]) (*connect_go.Response[xctf.SubmitEvidenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.SubmitEvidence is not implemented"))
}

func (UnimplementedBackendHandler) SubmitEvidenceConnection(context.Context, *connect_go.Request[xctf.SubmitEvidenceConnectionRequest]) (*connect_go.Response[xctf.SubmitEvidenceConnectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.SubmitEvidenceConnection is not implemented"))
}

func (UnimplementedBackendHandler) GetHomePage(context.Context, *connect_go.Request[xctf.GetHomePageRequest]) (*connect_go.Response[xctf.GetHomePageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.GetHomePage is not implemented"))
}

func (UnimplementedBackendHandler) ForgotPassword(context.Context, *connect_go.Request[xctf.ForgotPasswordRequest]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.ForgotPassword is not implemented"))
}

func (UnimplementedBackendHandler) SubmitWriteup(context.Context, *connect_go.Request[xctf.SubmitWriteupRequest]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.SubmitWriteup is not implemented"))
}

func (UnimplementedBackendHandler) GetUserWriteup(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.GetUserWriteupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.GetUserWriteup is not implemented"))
}

func (UnimplementedBackendHandler) GetCompetitions(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[chalgen.CompetitionList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.GetCompetitions is not implemented"))
}

func (UnimplementedBackendHandler) UpdateCompetition(context.Context, *connect_go.Request[chalgen.Competition]) (*connect_go.Response[chalgen.Competition], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.UpdateCompetition is not implemented"))
}

func (UnimplementedBackendHandler) DeleteCompetition(context.Context, *connect_go.Request[chalgen.Competition]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.DeleteCompetition is not implemented"))
}

func (UnimplementedBackendHandler) ChallengeType(context.Context, *connect_go.Request[xctf.Empty]) (*connect_go.Response[xctf.ChallengeTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.ChallengeType is not implemented"))
}

func (UnimplementedBackendHandler) SignedURL(context.Context, *connect_go.Request[xctf.SignedURLRequest]) (*connect_go.Response[xctf.SignedURLResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Backend.SignedURL is not implemented"))
}

// AdminClient is a client for the xctf.Admin service.
type AdminClient interface {
	UpsertChallenge(context.Context, *connect_go.Request[xctf.UpsertChallengeRequest]) (*connect_go.Response[xctf.Empty], error)
	DeleteChallenge(context.Context, *connect_go.Request[xctf.DeleteChallengeRequest]) (*connect_go.Response[xctf.Empty], error)
	GetTeamsProgress(context.Context, *connect_go.Request[xctf.GetTeamsProgressRequest]) (*connect_go.Response[xctf.GetTeamsProgressResponse], error)
	GetAllChallenges(context.Context, *connect_go.Request[xctf.GetAllChallengesRequest]) (*connect_go.Response[xctf.GetAllChallengesResponse], error)
	SetHomePage(context.Context, *connect_go.Request[xctf.SetHomePageRequest]) (*connect_go.Response[xctf.Empty], error)
	GetWriteup(context.Context, *connect_go.Request[xctf.GetWriteupRequest]) (*connect_go.Response[xctf.GetWriteupResponse], error)
	SubmitGrade(context.Context, *connect_go.Request[xctf.SubmitGradeRequest]) (*connect_go.Response[xctf.Empty], error)
	SubmitComment(context.Context, *connect_go.Request[xctf.SubmitCommentRequest]) (*connect_go.Response[xctf.Empty], error)
	GetComments(context.Context, *connect_go.Request[xctf.GetCommentsRequest]) (*connect_go.Response[xctf.GetCommentsResponse], error)
	GetUserGraph(context.Context, *connect_go.Request[xctf.GetUserGraphRequest]) (*connect_go.Response[xctf.GetUserGraphResponse], error)
	SetComputer(context.Context, *connect_go.Request[xctf.SetComputerRequest]) (*connect_go.Response[xctf.Empty], error)
	ExportChallenge(context.Context, *connect_go.Request[chalgen.Node]) (*connect_go.Response[xctf.ExportChallengeResponse], error)
	ImportChallenge(context.Context, *connect_go.Request[xctf.ImportChallengeRequest]) (*connect_go.Response[xctf.ImportChallengeResponse], error)
	Readdir(context.Context, *connect_go.Request[xctf.ReaddirRequest]) (*connect_go.Response[xctf.ReaddirResponse], error)
	Remove(context.Context, *connect_go.Request[xctf.RemoveRequest]) (*connect_go.Response[xctf.RemoveResponse], error)
}

// NewAdminClient constructs a client for the xctf.Admin service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminClient{
		upsertChallenge: connect_go.NewClient[xctf.UpsertChallengeRequest, xctf.Empty](
			httpClient,
			baseURL+AdminUpsertChallengeProcedure,
			opts...,
		),
		deleteChallenge: connect_go.NewClient[xctf.DeleteChallengeRequest, xctf.Empty](
			httpClient,
			baseURL+AdminDeleteChallengeProcedure,
			opts...,
		),
		getTeamsProgress: connect_go.NewClient[xctf.GetTeamsProgressRequest, xctf.GetTeamsProgressResponse](
			httpClient,
			baseURL+AdminGetTeamsProgressProcedure,
			opts...,
		),
		getAllChallenges: connect_go.NewClient[xctf.GetAllChallengesRequest, xctf.GetAllChallengesResponse](
			httpClient,
			baseURL+AdminGetAllChallengesProcedure,
			opts...,
		),
		setHomePage: connect_go.NewClient[xctf.SetHomePageRequest, xctf.Empty](
			httpClient,
			baseURL+AdminSetHomePageProcedure,
			opts...,
		),
		getWriteup: connect_go.NewClient[xctf.GetWriteupRequest, xctf.GetWriteupResponse](
			httpClient,
			baseURL+AdminGetWriteupProcedure,
			opts...,
		),
		submitGrade: connect_go.NewClient[xctf.SubmitGradeRequest, xctf.Empty](
			httpClient,
			baseURL+AdminSubmitGradeProcedure,
			opts...,
		),
		submitComment: connect_go.NewClient[xctf.SubmitCommentRequest, xctf.Empty](
			httpClient,
			baseURL+AdminSubmitCommentProcedure,
			opts...,
		),
		getComments: connect_go.NewClient[xctf.GetCommentsRequest, xctf.GetCommentsResponse](
			httpClient,
			baseURL+AdminGetCommentsProcedure,
			opts...,
		),
		getUserGraph: connect_go.NewClient[xctf.GetUserGraphRequest, xctf.GetUserGraphResponse](
			httpClient,
			baseURL+AdminGetUserGraphProcedure,
			opts...,
		),
		setComputer: connect_go.NewClient[xctf.SetComputerRequest, xctf.Empty](
			httpClient,
			baseURL+AdminSetComputerProcedure,
			opts...,
		),
		exportChallenge: connect_go.NewClient[chalgen.Node, xctf.ExportChallengeResponse](
			httpClient,
			baseURL+AdminExportChallengeProcedure,
			opts...,
		),
		importChallenge: connect_go.NewClient[xctf.ImportChallengeRequest, xctf.ImportChallengeResponse](
			httpClient,
			baseURL+AdminImportChallengeProcedure,
			opts...,
		),
		readdir: connect_go.NewClient[xctf.ReaddirRequest, xctf.ReaddirResponse](
			httpClient,
			baseURL+AdminReaddirProcedure,
			opts...,
		),
		remove: connect_go.NewClient[xctf.RemoveRequest, xctf.RemoveResponse](
			httpClient,
			baseURL+AdminRemoveProcedure,
			opts...,
		),
	}
}

// adminClient implements AdminClient.
type adminClient struct {
	upsertChallenge  *connect_go.Client[xctf.UpsertChallengeRequest, xctf.Empty]
	deleteChallenge  *connect_go.Client[xctf.DeleteChallengeRequest, xctf.Empty]
	getTeamsProgress *connect_go.Client[xctf.GetTeamsProgressRequest, xctf.GetTeamsProgressResponse]
	getAllChallenges *connect_go.Client[xctf.GetAllChallengesRequest, xctf.GetAllChallengesResponse]
	setHomePage      *connect_go.Client[xctf.SetHomePageRequest, xctf.Empty]
	getWriteup       *connect_go.Client[xctf.GetWriteupRequest, xctf.GetWriteupResponse]
	submitGrade      *connect_go.Client[xctf.SubmitGradeRequest, xctf.Empty]
	submitComment    *connect_go.Client[xctf.SubmitCommentRequest, xctf.Empty]
	getComments      *connect_go.Client[xctf.GetCommentsRequest, xctf.GetCommentsResponse]
	getUserGraph     *connect_go.Client[xctf.GetUserGraphRequest, xctf.GetUserGraphResponse]
	setComputer      *connect_go.Client[xctf.SetComputerRequest, xctf.Empty]
	exportChallenge  *connect_go.Client[chalgen.Node, xctf.ExportChallengeResponse]
	importChallenge  *connect_go.Client[xctf.ImportChallengeRequest, xctf.ImportChallengeResponse]
	readdir          *connect_go.Client[xctf.ReaddirRequest, xctf.ReaddirResponse]
	remove           *connect_go.Client[xctf.RemoveRequest, xctf.RemoveResponse]
}

// UpsertChallenge calls xctf.Admin.UpsertChallenge.
func (c *adminClient) UpsertChallenge(ctx context.Context, req *connect_go.Request[xctf.UpsertChallengeRequest]) (*connect_go.Response[xctf.Empty], error) {
	return c.upsertChallenge.CallUnary(ctx, req)
}

// DeleteChallenge calls xctf.Admin.DeleteChallenge.
func (c *adminClient) DeleteChallenge(ctx context.Context, req *connect_go.Request[xctf.DeleteChallengeRequest]) (*connect_go.Response[xctf.Empty], error) {
	return c.deleteChallenge.CallUnary(ctx, req)
}

// GetTeamsProgress calls xctf.Admin.GetTeamsProgress.
func (c *adminClient) GetTeamsProgress(ctx context.Context, req *connect_go.Request[xctf.GetTeamsProgressRequest]) (*connect_go.Response[xctf.GetTeamsProgressResponse], error) {
	return c.getTeamsProgress.CallUnary(ctx, req)
}

// GetAllChallenges calls xctf.Admin.GetAllChallenges.
func (c *adminClient) GetAllChallenges(ctx context.Context, req *connect_go.Request[xctf.GetAllChallengesRequest]) (*connect_go.Response[xctf.GetAllChallengesResponse], error) {
	return c.getAllChallenges.CallUnary(ctx, req)
}

// SetHomePage calls xctf.Admin.SetHomePage.
func (c *adminClient) SetHomePage(ctx context.Context, req *connect_go.Request[xctf.SetHomePageRequest]) (*connect_go.Response[xctf.Empty], error) {
	return c.setHomePage.CallUnary(ctx, req)
}

// GetWriteup calls xctf.Admin.GetWriteup.
func (c *adminClient) GetWriteup(ctx context.Context, req *connect_go.Request[xctf.GetWriteupRequest]) (*connect_go.Response[xctf.GetWriteupResponse], error) {
	return c.getWriteup.CallUnary(ctx, req)
}

// SubmitGrade calls xctf.Admin.SubmitGrade.
func (c *adminClient) SubmitGrade(ctx context.Context, req *connect_go.Request[xctf.SubmitGradeRequest]) (*connect_go.Response[xctf.Empty], error) {
	return c.submitGrade.CallUnary(ctx, req)
}

// SubmitComment calls xctf.Admin.SubmitComment.
func (c *adminClient) SubmitComment(ctx context.Context, req *connect_go.Request[xctf.SubmitCommentRequest]) (*connect_go.Response[xctf.Empty], error) {
	return c.submitComment.CallUnary(ctx, req)
}

// GetComments calls xctf.Admin.GetComments.
func (c *adminClient) GetComments(ctx context.Context, req *connect_go.Request[xctf.GetCommentsRequest]) (*connect_go.Response[xctf.GetCommentsResponse], error) {
	return c.getComments.CallUnary(ctx, req)
}

// GetUserGraph calls xctf.Admin.GetUserGraph.
func (c *adminClient) GetUserGraph(ctx context.Context, req *connect_go.Request[xctf.GetUserGraphRequest]) (*connect_go.Response[xctf.GetUserGraphResponse], error) {
	return c.getUserGraph.CallUnary(ctx, req)
}

// SetComputer calls xctf.Admin.SetComputer.
func (c *adminClient) SetComputer(ctx context.Context, req *connect_go.Request[xctf.SetComputerRequest]) (*connect_go.Response[xctf.Empty], error) {
	return c.setComputer.CallUnary(ctx, req)
}

// ExportChallenge calls xctf.Admin.ExportChallenge.
func (c *adminClient) ExportChallenge(ctx context.Context, req *connect_go.Request[chalgen.Node]) (*connect_go.Response[xctf.ExportChallengeResponse], error) {
	return c.exportChallenge.CallUnary(ctx, req)
}

// ImportChallenge calls xctf.Admin.ImportChallenge.
func (c *adminClient) ImportChallenge(ctx context.Context, req *connect_go.Request[xctf.ImportChallengeRequest]) (*connect_go.Response[xctf.ImportChallengeResponse], error) {
	return c.importChallenge.CallUnary(ctx, req)
}

// Readdir calls xctf.Admin.Readdir.
func (c *adminClient) Readdir(ctx context.Context, req *connect_go.Request[xctf.ReaddirRequest]) (*connect_go.Response[xctf.ReaddirResponse], error) {
	return c.readdir.CallUnary(ctx, req)
}

// Remove calls xctf.Admin.Remove.
func (c *adminClient) Remove(ctx context.Context, req *connect_go.Request[xctf.RemoveRequest]) (*connect_go.Response[xctf.RemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// AdminHandler is an implementation of the xctf.Admin service.
type AdminHandler interface {
	UpsertChallenge(context.Context, *connect_go.Request[xctf.UpsertChallengeRequest]) (*connect_go.Response[xctf.Empty], error)
	DeleteChallenge(context.Context, *connect_go.Request[xctf.DeleteChallengeRequest]) (*connect_go.Response[xctf.Empty], error)
	GetTeamsProgress(context.Context, *connect_go.Request[xctf.GetTeamsProgressRequest]) (*connect_go.Response[xctf.GetTeamsProgressResponse], error)
	GetAllChallenges(context.Context, *connect_go.Request[xctf.GetAllChallengesRequest]) (*connect_go.Response[xctf.GetAllChallengesResponse], error)
	SetHomePage(context.Context, *connect_go.Request[xctf.SetHomePageRequest]) (*connect_go.Response[xctf.Empty], error)
	GetWriteup(context.Context, *connect_go.Request[xctf.GetWriteupRequest]) (*connect_go.Response[xctf.GetWriteupResponse], error)
	SubmitGrade(context.Context, *connect_go.Request[xctf.SubmitGradeRequest]) (*connect_go.Response[xctf.Empty], error)
	SubmitComment(context.Context, *connect_go.Request[xctf.SubmitCommentRequest]) (*connect_go.Response[xctf.Empty], error)
	GetComments(context.Context, *connect_go.Request[xctf.GetCommentsRequest]) (*connect_go.Response[xctf.GetCommentsResponse], error)
	GetUserGraph(context.Context, *connect_go.Request[xctf.GetUserGraphRequest]) (*connect_go.Response[xctf.GetUserGraphResponse], error)
	SetComputer(context.Context, *connect_go.Request[xctf.SetComputerRequest]) (*connect_go.Response[xctf.Empty], error)
	ExportChallenge(context.Context, *connect_go.Request[chalgen.Node]) (*connect_go.Response[xctf.ExportChallengeResponse], error)
	ImportChallenge(context.Context, *connect_go.Request[xctf.ImportChallengeRequest]) (*connect_go.Response[xctf.ImportChallengeResponse], error)
	Readdir(context.Context, *connect_go.Request[xctf.ReaddirRequest]) (*connect_go.Response[xctf.ReaddirResponse], error)
	Remove(context.Context, *connect_go.Request[xctf.RemoveRequest]) (*connect_go.Response[xctf.RemoveResponse], error)
}

// NewAdminHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminHandler(svc AdminHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	adminUpsertChallengeHandler := connect_go.NewUnaryHandler(
		AdminUpsertChallengeProcedure,
		svc.UpsertChallenge,
		opts...,
	)
	adminDeleteChallengeHandler := connect_go.NewUnaryHandler(
		AdminDeleteChallengeProcedure,
		svc.DeleteChallenge,
		opts...,
	)
	adminGetTeamsProgressHandler := connect_go.NewUnaryHandler(
		AdminGetTeamsProgressProcedure,
		svc.GetTeamsProgress,
		opts...,
	)
	adminGetAllChallengesHandler := connect_go.NewUnaryHandler(
		AdminGetAllChallengesProcedure,
		svc.GetAllChallenges,
		opts...,
	)
	adminSetHomePageHandler := connect_go.NewUnaryHandler(
		AdminSetHomePageProcedure,
		svc.SetHomePage,
		opts...,
	)
	adminGetWriteupHandler := connect_go.NewUnaryHandler(
		AdminGetWriteupProcedure,
		svc.GetWriteup,
		opts...,
	)
	adminSubmitGradeHandler := connect_go.NewUnaryHandler(
		AdminSubmitGradeProcedure,
		svc.SubmitGrade,
		opts...,
	)
	adminSubmitCommentHandler := connect_go.NewUnaryHandler(
		AdminSubmitCommentProcedure,
		svc.SubmitComment,
		opts...,
	)
	adminGetCommentsHandler := connect_go.NewUnaryHandler(
		AdminGetCommentsProcedure,
		svc.GetComments,
		opts...,
	)
	adminGetUserGraphHandler := connect_go.NewUnaryHandler(
		AdminGetUserGraphProcedure,
		svc.GetUserGraph,
		opts...,
	)
	adminSetComputerHandler := connect_go.NewUnaryHandler(
		AdminSetComputerProcedure,
		svc.SetComputer,
		opts...,
	)
	adminExportChallengeHandler := connect_go.NewUnaryHandler(
		AdminExportChallengeProcedure,
		svc.ExportChallenge,
		opts...,
	)
	adminImportChallengeHandler := connect_go.NewUnaryHandler(
		AdminImportChallengeProcedure,
		svc.ImportChallenge,
		opts...,
	)
	adminReaddirHandler := connect_go.NewUnaryHandler(
		AdminReaddirProcedure,
		svc.Readdir,
		opts...,
	)
	adminRemoveHandler := connect_go.NewUnaryHandler(
		AdminRemoveProcedure,
		svc.Remove,
		opts...,
	)
	return "/xctf.Admin/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminUpsertChallengeProcedure:
			adminUpsertChallengeHandler.ServeHTTP(w, r)
		case AdminDeleteChallengeProcedure:
			adminDeleteChallengeHandler.ServeHTTP(w, r)
		case AdminGetTeamsProgressProcedure:
			adminGetTeamsProgressHandler.ServeHTTP(w, r)
		case AdminGetAllChallengesProcedure:
			adminGetAllChallengesHandler.ServeHTTP(w, r)
		case AdminSetHomePageProcedure:
			adminSetHomePageHandler.ServeHTTP(w, r)
		case AdminGetWriteupProcedure:
			adminGetWriteupHandler.ServeHTTP(w, r)
		case AdminSubmitGradeProcedure:
			adminSubmitGradeHandler.ServeHTTP(w, r)
		case AdminSubmitCommentProcedure:
			adminSubmitCommentHandler.ServeHTTP(w, r)
		case AdminGetCommentsProcedure:
			adminGetCommentsHandler.ServeHTTP(w, r)
		case AdminGetUserGraphProcedure:
			adminGetUserGraphHandler.ServeHTTP(w, r)
		case AdminSetComputerProcedure:
			adminSetComputerHandler.ServeHTTP(w, r)
		case AdminExportChallengeProcedure:
			adminExportChallengeHandler.ServeHTTP(w, r)
		case AdminImportChallengeProcedure:
			adminImportChallengeHandler.ServeHTTP(w, r)
		case AdminReaddirProcedure:
			adminReaddirHandler.ServeHTTP(w, r)
		case AdminRemoveProcedure:
			adminRemoveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminHandler struct{}

func (UnimplementedAdminHandler) UpsertChallenge(context.Context, *connect_go.Request[xctf.UpsertChallengeRequest]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.UpsertChallenge is not implemented"))
}

func (UnimplementedAdminHandler) DeleteChallenge(context.Context, *connect_go.Request[xctf.DeleteChallengeRequest]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.DeleteChallenge is not implemented"))
}

func (UnimplementedAdminHandler) GetTeamsProgress(context.Context, *connect_go.Request[xctf.GetTeamsProgressRequest]) (*connect_go.Response[xctf.GetTeamsProgressResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.GetTeamsProgress is not implemented"))
}

func (UnimplementedAdminHandler) GetAllChallenges(context.Context, *connect_go.Request[xctf.GetAllChallengesRequest]) (*connect_go.Response[xctf.GetAllChallengesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.GetAllChallenges is not implemented"))
}

func (UnimplementedAdminHandler) SetHomePage(context.Context, *connect_go.Request[xctf.SetHomePageRequest]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.SetHomePage is not implemented"))
}

func (UnimplementedAdminHandler) GetWriteup(context.Context, *connect_go.Request[xctf.GetWriteupRequest]) (*connect_go.Response[xctf.GetWriteupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.GetWriteup is not implemented"))
}

func (UnimplementedAdminHandler) SubmitGrade(context.Context, *connect_go.Request[xctf.SubmitGradeRequest]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.SubmitGrade is not implemented"))
}

func (UnimplementedAdminHandler) SubmitComment(context.Context, *connect_go.Request[xctf.SubmitCommentRequest]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.SubmitComment is not implemented"))
}

func (UnimplementedAdminHandler) GetComments(context.Context, *connect_go.Request[xctf.GetCommentsRequest]) (*connect_go.Response[xctf.GetCommentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.GetComments is not implemented"))
}

func (UnimplementedAdminHandler) GetUserGraph(context.Context, *connect_go.Request[xctf.GetUserGraphRequest]) (*connect_go.Response[xctf.GetUserGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.GetUserGraph is not implemented"))
}

func (UnimplementedAdminHandler) SetComputer(context.Context, *connect_go.Request[xctf.SetComputerRequest]) (*connect_go.Response[xctf.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.SetComputer is not implemented"))
}

func (UnimplementedAdminHandler) ExportChallenge(context.Context, *connect_go.Request[chalgen.Node]) (*connect_go.Response[xctf.ExportChallengeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.ExportChallenge is not implemented"))
}

func (UnimplementedAdminHandler) ImportChallenge(context.Context, *connect_go.Request[xctf.ImportChallengeRequest]) (*connect_go.Response[xctf.ImportChallengeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.ImportChallenge is not implemented"))
}

func (UnimplementedAdminHandler) Readdir(context.Context, *connect_go.Request[xctf.ReaddirRequest]) (*connect_go.Response[xctf.ReaddirResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.Readdir is not implemented"))
}

func (UnimplementedAdminHandler) Remove(context.Context, *connect_go.Request[xctf.RemoveRequest]) (*connect_go.Response[xctf.RemoveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("xctf.Admin.Remove is not implemented"))
}
