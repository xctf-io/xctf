// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file xctf/xctf.proto (package xctf, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message xctf.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message xctf.UpsertChallengeRequest
 */
export class UpsertChallengeRequest extends Message<UpsertChallengeRequest> {
  /**
   * @generated from field: string challengeName = 1;
   */
  challengeName = "";

  /**
   * @generated from field: string flag = 2;
   */
  flag = "";

  constructor(data?: PartialMessage<UpsertChallengeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.UpsertChallengeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challengeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertChallengeRequest {
    return new UpsertChallengeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertChallengeRequest {
    return new UpsertChallengeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertChallengeRequest {
    return new UpsertChallengeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertChallengeRequest | PlainMessage<UpsertChallengeRequest> | undefined, b: UpsertChallengeRequest | PlainMessage<UpsertChallengeRequest> | undefined): boolean {
    return proto3.util.equals(UpsertChallengeRequest, a, b);
  }
}

/**
 * @generated from message xctf.DeleteChallengeRequest
 */
export class DeleteChallengeRequest extends Message<DeleteChallengeRequest> {
  /**
   * @generated from field: string challengeName = 1;
   */
  challengeName = "";

  constructor(data?: PartialMessage<DeleteChallengeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.DeleteChallengeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challengeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteChallengeRequest {
    return new DeleteChallengeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteChallengeRequest {
    return new DeleteChallengeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteChallengeRequest {
    return new DeleteChallengeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteChallengeRequest | PlainMessage<DeleteChallengeRequest> | undefined, b: DeleteChallengeRequest | PlainMessage<DeleteChallengeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteChallengeRequest, a, b);
  }
}

/**
 * @generated from message xctf.SubmitEvidenceReportRequest
 */
export class SubmitEvidenceReportRequest extends Message<SubmitEvidenceReportRequest> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<SubmitEvidenceReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitEvidenceReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEvidenceReportRequest {
    return new SubmitEvidenceReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEvidenceReportRequest {
    return new SubmitEvidenceReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEvidenceReportRequest {
    return new SubmitEvidenceReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEvidenceReportRequest | PlainMessage<SubmitEvidenceReportRequest> | undefined, b: SubmitEvidenceReportRequest | PlainMessage<SubmitEvidenceReportRequest> | undefined): boolean {
    return proto3.util.equals(SubmitEvidenceReportRequest, a, b);
  }
}

/**
 * @generated from message xctf.SubmitEvidenceReportResponse
 */
export class SubmitEvidenceReportResponse extends Message<SubmitEvidenceReportResponse> {
  constructor(data?: PartialMessage<SubmitEvidenceReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitEvidenceReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEvidenceReportResponse {
    return new SubmitEvidenceReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEvidenceReportResponse {
    return new SubmitEvidenceReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEvidenceReportResponse {
    return new SubmitEvidenceReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEvidenceReportResponse | PlainMessage<SubmitEvidenceReportResponse> | undefined, b: SubmitEvidenceReportResponse | PlainMessage<SubmitEvidenceReportResponse> | undefined): boolean {
    return proto3.util.equals(SubmitEvidenceReportResponse, a, b);
  }
}

/**
 * @generated from message xctf.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.LoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message xctf.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string userRole = 2;
   */
  userRole = "";

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.LoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userRole", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from message xctf.Evidence
 */
export class Evidence extends Message<Evidence> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 challengeID = 3;
   */
  challengeID = 0;

  /**
   * @generated from field: int32 x = 4;
   */
  x = 0;

  /**
   * @generated from field: int32 y = 5;
   */
  y = 0;

  /**
   * @generated from field: bool isFlag = 6;
   */
  isFlag = false;

  constructor(data?: PartialMessage<Evidence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.Evidence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "challengeID", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "x", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "isFlag", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Evidence {
    return new Evidence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Evidence {
    return new Evidence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Evidence {
    return new Evidence().fromJsonString(jsonString, options);
  }

  static equals(a: Evidence | PlainMessage<Evidence> | undefined, b: Evidence | PlainMessage<Evidence> | undefined): boolean {
    return proto3.util.equals(Evidence, a, b);
  }
}

/**
 * @generated from message xctf.Connection
 */
export class Connection extends Message<Connection> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: uint32 source = 2;
   */
  source = 0;

  /**
   * @generated from field: uint32 destination = 3;
   */
  destination = 0;

  constructor(data?: PartialMessage<Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "source", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "destination", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connection {
    return new Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connection {
    return new Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connection {
    return new Connection().fromJsonString(jsonString, options);
  }

  static equals(a: Connection | PlainMessage<Connection> | undefined, b: Connection | PlainMessage<Connection> | undefined): boolean {
    return proto3.util.equals(Connection, a, b);
  }
}

/**
 * @generated from message xctf.GetDiscoveredEvidenceRequest
 */
export class GetDiscoveredEvidenceRequest extends Message<GetDiscoveredEvidenceRequest> {
  constructor(data?: PartialMessage<GetDiscoveredEvidenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetDiscoveredEvidenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscoveredEvidenceRequest {
    return new GetDiscoveredEvidenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscoveredEvidenceRequest {
    return new GetDiscoveredEvidenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscoveredEvidenceRequest {
    return new GetDiscoveredEvidenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscoveredEvidenceRequest | PlainMessage<GetDiscoveredEvidenceRequest> | undefined, b: GetDiscoveredEvidenceRequest | PlainMessage<GetDiscoveredEvidenceRequest> | undefined): boolean {
    return proto3.util.equals(GetDiscoveredEvidenceRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetDiscoveredEvidenceResponse
 */
export class GetDiscoveredEvidenceResponse extends Message<GetDiscoveredEvidenceResponse> {
  /**
   * @generated from field: string report = 1;
   */
  report = "";

  /**
   * @generated from field: repeated xctf.Evidence evidence = 2;
   */
  evidence: Evidence[] = [];

  /**
   * @generated from field: repeated xctf.Connection connections = 3;
   */
  connections: Connection[] = [];

  constructor(data?: PartialMessage<GetDiscoveredEvidenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetDiscoveredEvidenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "report", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "evidence", kind: "message", T: Evidence, repeated: true },
    { no: 3, name: "connections", kind: "message", T: Connection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscoveredEvidenceResponse {
    return new GetDiscoveredEvidenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscoveredEvidenceResponse {
    return new GetDiscoveredEvidenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscoveredEvidenceResponse {
    return new GetDiscoveredEvidenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscoveredEvidenceResponse | PlainMessage<GetDiscoveredEvidenceResponse> | undefined, b: GetDiscoveredEvidenceResponse | PlainMessage<GetDiscoveredEvidenceResponse> | undefined): boolean {
    return proto3.util.equals(GetDiscoveredEvidenceResponse, a, b);
  }
}

/**
 * @generated from message xctf.SubmitEvidenceRequest
 */
export class SubmitEvidenceRequest extends Message<SubmitEvidenceRequest> {
  /**
   * this could either be the name of some evidence or a flag.
   *
   * @generated from field: string evidence = 1;
   */
  evidence = "";

  /**
   * @generated from field: int32 x = 2;
   */
  x = 0;

  /**
   * @generated from field: int32 y = 3;
   */
  y = 0;

  /**
   * @generated from field: bool isFlag = 4;
   */
  isFlag = false;

  /**
   * @generated from field: bool remove = 5;
   */
  remove = false;

  constructor(data?: PartialMessage<SubmitEvidenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitEvidenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evidence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "x", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "isFlag", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "remove", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEvidenceRequest {
    return new SubmitEvidenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEvidenceRequest {
    return new SubmitEvidenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEvidenceRequest {
    return new SubmitEvidenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEvidenceRequest | PlainMessage<SubmitEvidenceRequest> | undefined, b: SubmitEvidenceRequest | PlainMessage<SubmitEvidenceRequest> | undefined): boolean {
    return proto3.util.equals(SubmitEvidenceRequest, a, b);
  }
}

/**
 * @generated from message xctf.SubmitEvidenceResponse
 */
export class SubmitEvidenceResponse extends Message<SubmitEvidenceResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<SubmitEvidenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitEvidenceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEvidenceResponse {
    return new SubmitEvidenceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEvidenceResponse {
    return new SubmitEvidenceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEvidenceResponse {
    return new SubmitEvidenceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEvidenceResponse | PlainMessage<SubmitEvidenceResponse> | undefined, b: SubmitEvidenceResponse | PlainMessage<SubmitEvidenceResponse> | undefined): boolean {
    return proto3.util.equals(SubmitEvidenceResponse, a, b);
  }
}

/**
 * @generated from message xctf.SubmitEvidenceConnectionRequest
 */
export class SubmitEvidenceConnectionRequest extends Message<SubmitEvidenceConnectionRequest> {
  /**
   * @generated from field: uint32 source = 1;
   */
  source = 0;

  /**
   * @generated from field: uint32 destination = 2;
   */
  destination = 0;

  /**
   * @generated from field: bool remove = 3;
   */
  remove = false;

  constructor(data?: PartialMessage<SubmitEvidenceConnectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitEvidenceConnectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "destination", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "remove", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEvidenceConnectionRequest {
    return new SubmitEvidenceConnectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEvidenceConnectionRequest {
    return new SubmitEvidenceConnectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEvidenceConnectionRequest {
    return new SubmitEvidenceConnectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEvidenceConnectionRequest | PlainMessage<SubmitEvidenceConnectionRequest> | undefined, b: SubmitEvidenceConnectionRequest | PlainMessage<SubmitEvidenceConnectionRequest> | undefined): boolean {
    return proto3.util.equals(SubmitEvidenceConnectionRequest, a, b);
  }
}

/**
 * @generated from message xctf.SubmitEvidenceConnectionResponse
 */
export class SubmitEvidenceConnectionResponse extends Message<SubmitEvidenceConnectionResponse> {
  /**
   * @generated from field: bool created = 1;
   */
  created = false;

  constructor(data?: PartialMessage<SubmitEvidenceConnectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitEvidenceConnectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitEvidenceConnectionResponse {
    return new SubmitEvidenceConnectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitEvidenceConnectionResponse {
    return new SubmitEvidenceConnectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitEvidenceConnectionResponse {
    return new SubmitEvidenceConnectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitEvidenceConnectionResponse | PlainMessage<SubmitEvidenceConnectionResponse> | undefined, b: SubmitEvidenceConnectionResponse | PlainMessage<SubmitEvidenceConnectionResponse> | undefined): boolean {
    return proto3.util.equals(SubmitEvidenceConnectionResponse, a, b);
  }
}

/**
 * @generated from message xctf.RegisterRequest
 */
export class RegisterRequest extends Message<RegisterRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  constructor(data?: PartialMessage<RegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.RegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRequest {
    return new RegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRequest {
    return new RegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRequest {
    return new RegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRequest | PlainMessage<RegisterRequest> | undefined, b: RegisterRequest | PlainMessage<RegisterRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRequest, a, b);
  }
}

/**
 * @generated from message xctf.RegisterResponse
 */
export class RegisterResponse extends Message<RegisterResponse> {
  /**
   * @generated from field: bool created = 1;
   */
  created = false;

  constructor(data?: PartialMessage<RegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.RegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterResponse {
    return new RegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterResponse | PlainMessage<RegisterResponse> | undefined, b: RegisterResponse | PlainMessage<RegisterResponse> | undefined): boolean {
    return proto3.util.equals(RegisterResponse, a, b);
  }
}

/**
 * @generated from message xctf.Page
 */
export class Page extends Message<Page> {
  /**
   * @generated from field: string route = 1;
   */
  route = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<Page>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.Page";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "route", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Page {
    return new Page().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Page {
    return new Page().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Page {
    return new Page().fromJsonString(jsonString, options);
  }

  static equals(a: Page | PlainMessage<Page> | undefined, b: Page | PlainMessage<Page> | undefined): boolean {
    return proto3.util.equals(Page, a, b);
  }
}

/**
 * @generated from message xctf.CurrentUserRequest
 */
export class CurrentUserRequest extends Message<CurrentUserRequest> {
  constructor(data?: PartialMessage<CurrentUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.CurrentUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentUserRequest {
    return new CurrentUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentUserRequest {
    return new CurrentUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentUserRequest {
    return new CurrentUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentUserRequest | PlainMessage<CurrentUserRequest> | undefined, b: CurrentUserRequest | PlainMessage<CurrentUserRequest> | undefined): boolean {
    return proto3.util.equals(CurrentUserRequest, a, b);
  }
}

/**
 * @generated from message xctf.CurrentUserResponse
 */
export class CurrentUserResponse extends Message<CurrentUserResponse> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string userRole = 2;
   */
  userRole = "";

  /**
   * @generated from field: repeated xctf.Page pages = 3;
   */
  pages: Page[] = [];

  constructor(data?: PartialMessage<CurrentUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.CurrentUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userRole", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pages", kind: "message", T: Page, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentUserResponse {
    return new CurrentUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentUserResponse {
    return new CurrentUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentUserResponse {
    return new CurrentUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentUserResponse | PlainMessage<CurrentUserResponse> | undefined, b: CurrentUserResponse | PlainMessage<CurrentUserResponse> | undefined): boolean {
    return proto3.util.equals(CurrentUserResponse, a, b);
  }
}

/**
 * @generated from message xctf.SubmitFlagRequest
 */
export class SubmitFlagRequest extends Message<SubmitFlagRequest> {
  /**
   * @generated from field: string flag = 1;
   */
  flag = "";

  constructor(data?: PartialMessage<SubmitFlagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitFlagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitFlagRequest {
    return new SubmitFlagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitFlagRequest {
    return new SubmitFlagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitFlagRequest {
    return new SubmitFlagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitFlagRequest | PlainMessage<SubmitFlagRequest> | undefined, b: SubmitFlagRequest | PlainMessage<SubmitFlagRequest> | undefined): boolean {
    return proto3.util.equals(SubmitFlagRequest, a, b);
  }
}

/**
 * @generated from message xctf.SubmitFlagResponse
 */
export class SubmitFlagResponse extends Message<SubmitFlagResponse> {
  /**
   * @generated from field: bool correct = 1;
   */
  correct = false;

  constructor(data?: PartialMessage<SubmitFlagResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitFlagResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "correct", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitFlagResponse {
    return new SubmitFlagResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitFlagResponse {
    return new SubmitFlagResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitFlagResponse {
    return new SubmitFlagResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitFlagResponse | PlainMessage<SubmitFlagResponse> | undefined, b: SubmitFlagResponse | PlainMessage<SubmitFlagResponse> | undefined): boolean {
    return proto3.util.equals(SubmitFlagResponse, a, b);
  }
}

/**
 * @generated from message xctf.TeamProgress
 */
export class TeamProgress extends Message<TeamProgress> {
  /**
   * @generated from field: string teamName = 1;
   */
  teamName = "";

  /**
   * @generated from field: bool hasWriteup = 2;
   */
  hasWriteup = false;

  /**
   * @generated from field: uint32 score = 3;
   */
  score = 0;

  /**
   * @generated from field: uint32 grade = 4;
   */
  grade = 0;

  constructor(data?: PartialMessage<TeamProgress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.TeamProgress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "teamName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hasWriteup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "score", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "grade", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TeamProgress {
    return new TeamProgress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TeamProgress {
    return new TeamProgress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TeamProgress {
    return new TeamProgress().fromJsonString(jsonString, options);
  }

  static equals(a: TeamProgress | PlainMessage<TeamProgress> | undefined, b: TeamProgress | PlainMessage<TeamProgress> | undefined): boolean {
    return proto3.util.equals(TeamProgress, a, b);
  }
}

/**
 * @generated from message xctf.GetTeamsProgressRequest
 */
export class GetTeamsProgressRequest extends Message<GetTeamsProgressRequest> {
  constructor(data?: PartialMessage<GetTeamsProgressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetTeamsProgressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamsProgressRequest {
    return new GetTeamsProgressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamsProgressRequest {
    return new GetTeamsProgressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamsProgressRequest {
    return new GetTeamsProgressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamsProgressRequest | PlainMessage<GetTeamsProgressRequest> | undefined, b: GetTeamsProgressRequest | PlainMessage<GetTeamsProgressRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamsProgressRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetTeamsProgressResponse
 */
export class GetTeamsProgressResponse extends Message<GetTeamsProgressResponse> {
  /**
   * @generated from field: repeated xctf.TeamProgress teams = 1;
   */
  teams: TeamProgress[] = [];

  constructor(data?: PartialMessage<GetTeamsProgressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetTeamsProgressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "teams", kind: "message", T: TeamProgress, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamsProgressResponse {
    return new GetTeamsProgressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamsProgressResponse {
    return new GetTeamsProgressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamsProgressResponse {
    return new GetTeamsProgressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamsProgressResponse | PlainMessage<GetTeamsProgressResponse> | undefined, b: GetTeamsProgressResponse | PlainMessage<GetTeamsProgressResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamsProgressResponse, a, b);
  }
}

/**
 * @generated from message xctf.Challenge
 */
export class Challenge extends Message<Challenge> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string flag = 2;
   */
  flag = "";

  constructor(data?: PartialMessage<Challenge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.Challenge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Challenge {
    return new Challenge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Challenge {
    return new Challenge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Challenge {
    return new Challenge().fromJsonString(jsonString, options);
  }

  static equals(a: Challenge | PlainMessage<Challenge> | undefined, b: Challenge | PlainMessage<Challenge> | undefined): boolean {
    return proto3.util.equals(Challenge, a, b);
  }
}

/**
 * @generated from message xctf.GetAllChallengesRequest
 */
export class GetAllChallengesRequest extends Message<GetAllChallengesRequest> {
  constructor(data?: PartialMessage<GetAllChallengesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetAllChallengesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllChallengesRequest {
    return new GetAllChallengesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllChallengesRequest {
    return new GetAllChallengesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllChallengesRequest {
    return new GetAllChallengesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllChallengesRequest | PlainMessage<GetAllChallengesRequest> | undefined, b: GetAllChallengesRequest | PlainMessage<GetAllChallengesRequest> | undefined): boolean {
    return proto3.util.equals(GetAllChallengesRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetAllChallengesResponse
 */
export class GetAllChallengesResponse extends Message<GetAllChallengesResponse> {
  /**
   * @generated from field: repeated xctf.Challenge challenges = 1;
   */
  challenges: Challenge[] = [];

  constructor(data?: PartialMessage<GetAllChallengesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetAllChallengesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "challenges", kind: "message", T: Challenge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllChallengesResponse {
    return new GetAllChallengesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllChallengesResponse {
    return new GetAllChallengesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllChallengesResponse {
    return new GetAllChallengesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllChallengesResponse | PlainMessage<GetAllChallengesResponse> | undefined, b: GetAllChallengesResponse | PlainMessage<GetAllChallengesResponse> | undefined): boolean {
    return proto3.util.equals(GetAllChallengesResponse, a, b);
  }
}

/**
 * @generated from message xctf.SetHomePageRequest
 */
export class SetHomePageRequest extends Message<SetHomePageRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<SetHomePageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SetHomePageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetHomePageRequest {
    return new SetHomePageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetHomePageRequest {
    return new SetHomePageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetHomePageRequest {
    return new SetHomePageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetHomePageRequest | PlainMessage<SetHomePageRequest> | undefined, b: SetHomePageRequest | PlainMessage<SetHomePageRequest> | undefined): boolean {
    return proto3.util.equals(SetHomePageRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetHomePageRequest
 */
export class GetHomePageRequest extends Message<GetHomePageRequest> {
  constructor(data?: PartialMessage<GetHomePageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetHomePageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHomePageRequest {
    return new GetHomePageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHomePageRequest {
    return new GetHomePageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHomePageRequest {
    return new GetHomePageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHomePageRequest | PlainMessage<GetHomePageRequest> | undefined, b: GetHomePageRequest | PlainMessage<GetHomePageRequest> | undefined): boolean {
    return proto3.util.equals(GetHomePageRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetHomePageResponse
 */
export class GetHomePageResponse extends Message<GetHomePageResponse> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<GetHomePageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetHomePageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHomePageResponse {
    return new GetHomePageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHomePageResponse {
    return new GetHomePageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHomePageResponse {
    return new GetHomePageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHomePageResponse | PlainMessage<GetHomePageResponse> | undefined, b: GetHomePageResponse | PlainMessage<GetHomePageResponse> | undefined): boolean {
    return proto3.util.equals(GetHomePageResponse, a, b);
  }
}

/**
 * @generated from message xctf.ForgotPasswordRequest
 */
export class ForgotPasswordRequest extends Message<ForgotPasswordRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<ForgotPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.ForgotPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForgotPasswordRequest {
    return new ForgotPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForgotPasswordRequest {
    return new ForgotPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForgotPasswordRequest {
    return new ForgotPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ForgotPasswordRequest | PlainMessage<ForgotPasswordRequest> | undefined, b: ForgotPasswordRequest | PlainMessage<ForgotPasswordRequest> | undefined): boolean {
    return proto3.util.equals(ForgotPasswordRequest, a, b);
  }
}

/**
 * @generated from message xctf.SubmitWriteupRequest
 */
export class SubmitWriteupRequest extends Message<SubmitWriteupRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<SubmitWriteupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitWriteupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitWriteupRequest {
    return new SubmitWriteupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitWriteupRequest {
    return new SubmitWriteupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitWriteupRequest {
    return new SubmitWriteupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitWriteupRequest | PlainMessage<SubmitWriteupRequest> | undefined, b: SubmitWriteupRequest | PlainMessage<SubmitWriteupRequest> | undefined): boolean {
    return proto3.util.equals(SubmitWriteupRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetWriteupRequest
 */
export class GetWriteupRequest extends Message<GetWriteupRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<GetWriteupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetWriteupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWriteupRequest {
    return new GetWriteupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWriteupRequest {
    return new GetWriteupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWriteupRequest {
    return new GetWriteupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWriteupRequest | PlainMessage<GetWriteupRequest> | undefined, b: GetWriteupRequest | PlainMessage<GetWriteupRequest> | undefined): boolean {
    return proto3.util.equals(GetWriteupRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetWriteupResponse
 */
export class GetWriteupResponse extends Message<GetWriteupResponse> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<GetWriteupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetWriteupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWriteupResponse {
    return new GetWriteupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWriteupResponse {
    return new GetWriteupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWriteupResponse {
    return new GetWriteupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWriteupResponse | PlainMessage<GetWriteupResponse> | undefined, b: GetWriteupResponse | PlainMessage<GetWriteupResponse> | undefined): boolean {
    return proto3.util.equals(GetWriteupResponse, a, b);
  }
}

/**
 * @generated from message xctf.SubmitGradeRequest
 */
export class SubmitGradeRequest extends Message<SubmitGradeRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: uint32 score = 2;
   */
  score = 0;

  constructor(data?: PartialMessage<SubmitGradeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitGradeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "score", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitGradeRequest {
    return new SubmitGradeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitGradeRequest {
    return new SubmitGradeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitGradeRequest {
    return new SubmitGradeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitGradeRequest | PlainMessage<SubmitGradeRequest> | undefined, b: SubmitGradeRequest | PlainMessage<SubmitGradeRequest> | undefined): boolean {
    return proto3.util.equals(SubmitGradeRequest, a, b);
  }
}

/**
 * @generated from message xctf.HighlightArea
 */
export class HighlightArea extends Message<HighlightArea> {
  /**
   * @generated from field: float height = 1;
   */
  height = 0;

  /**
   * @generated from field: float width = 2;
   */
  width = 0;

  /**
   * @generated from field: uint32 pageIndex = 3;
   */
  pageIndex = 0;

  /**
   * @generated from field: float top = 4;
   */
  top = 0;

  /**
   * @generated from field: float left = 5;
   */
  left = 0;

  constructor(data?: PartialMessage<HighlightArea>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.HighlightArea";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "width", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "pageIndex", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "top", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "left", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HighlightArea {
    return new HighlightArea().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HighlightArea {
    return new HighlightArea().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HighlightArea {
    return new HighlightArea().fromJsonString(jsonString, options);
  }

  static equals(a: HighlightArea | PlainMessage<HighlightArea> | undefined, b: HighlightArea | PlainMessage<HighlightArea> | undefined): boolean {
    return proto3.util.equals(HighlightArea, a, b);
  }
}

/**
 * @generated from message xctf.SubmitCommentRequest
 */
export class SubmitCommentRequest extends Message<SubmitCommentRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: uint32 id = 2;
   */
  id = 0;

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  /**
   * @generated from field: repeated xctf.HighlightArea areas = 4;
   */
  areas: HighlightArea[] = [];

  /**
   * @generated from field: string quote = 5;
   */
  quote = "";

  constructor(data?: PartialMessage<SubmitCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.SubmitCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "areas", kind: "message", T: HighlightArea, repeated: true },
    { no: 5, name: "quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitCommentRequest {
    return new SubmitCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitCommentRequest {
    return new SubmitCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitCommentRequest {
    return new SubmitCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitCommentRequest | PlainMessage<SubmitCommentRequest> | undefined, b: SubmitCommentRequest | PlainMessage<SubmitCommentRequest> | undefined): boolean {
    return proto3.util.equals(SubmitCommentRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetCommentsRequest
 */
export class GetCommentsRequest extends Message<GetCommentsRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<GetCommentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetCommentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommentsRequest {
    return new GetCommentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommentsRequest {
    return new GetCommentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommentsRequest {
    return new GetCommentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommentsRequest | PlainMessage<GetCommentsRequest> | undefined, b: GetCommentsRequest | PlainMessage<GetCommentsRequest> | undefined): boolean {
    return proto3.util.equals(GetCommentsRequest, a, b);
  }
}

/**
 * @generated from message xctf.Comment
 */
export class Comment extends Message<Comment> {
  /**
   * @generated from field: uint32 id = 2;
   */
  id = 0;

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  /**
   * @generated from field: repeated xctf.HighlightArea areas = 4;
   */
  areas: HighlightArea[] = [];

  /**
   * @generated from field: string quote = 5;
   */
  quote = "";

  constructor(data?: PartialMessage<Comment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.Comment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "areas", kind: "message", T: HighlightArea, repeated: true },
    { no: 5, name: "quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comment {
    return new Comment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJsonString(jsonString, options);
  }

  static equals(a: Comment | PlainMessage<Comment> | undefined, b: Comment | PlainMessage<Comment> | undefined): boolean {
    return proto3.util.equals(Comment, a, b);
  }
}

/**
 * @generated from message xctf.GetCommentsResponse
 */
export class GetCommentsResponse extends Message<GetCommentsResponse> {
  /**
   * @generated from field: repeated xctf.Comment comments = 1;
   */
  comments: Comment[] = [];

  constructor(data?: PartialMessage<GetCommentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetCommentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comments", kind: "message", T: Comment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommentsResponse {
    return new GetCommentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommentsResponse {
    return new GetCommentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommentsResponse {
    return new GetCommentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommentsResponse | PlainMessage<GetCommentsResponse> | undefined, b: GetCommentsResponse | PlainMessage<GetCommentsResponse> | undefined): boolean {
    return proto3.util.equals(GetCommentsResponse, a, b);
  }
}

/**
 * @generated from message xctf.GetUserGraphRequest
 */
export class GetUserGraphRequest extends Message<GetUserGraphRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<GetUserGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetUserGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserGraphRequest {
    return new GetUserGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserGraphRequest {
    return new GetUserGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserGraphRequest {
    return new GetUserGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserGraphRequest | PlainMessage<GetUserGraphRequest> | undefined, b: GetUserGraphRequest | PlainMessage<GetUserGraphRequest> | undefined): boolean {
    return proto3.util.equals(GetUserGraphRequest, a, b);
  }
}

/**
 * @generated from message xctf.GetUserGraphResponse
 */
export class GetUserGraphResponse extends Message<GetUserGraphResponse> {
  /**
   * @generated from field: repeated xctf.Evidence evidence = 1;
   */
  evidence: Evidence[] = [];

  /**
   * @generated from field: repeated xctf.Connection connections = 2;
   */
  connections: Connection[] = [];

  constructor(data?: PartialMessage<GetUserGraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xctf.GetUserGraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evidence", kind: "message", T: Evidence, repeated: true },
    { no: 2, name: "connections", kind: "message", T: Connection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserGraphResponse {
    return new GetUserGraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserGraphResponse {
    return new GetUserGraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserGraphResponse {
    return new GetUserGraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserGraphResponse | PlainMessage<GetUserGraphResponse> | undefined, b: GetUserGraphResponse | PlainMessage<GetUserGraphResponse> | undefined): boolean {
    return proto3.util.equals(GetUserGraphResponse, a, b);
  }
}

