// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file chalgen/base.proto (package chalgen, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message chalgen.Challenge
 */
export class Challenge extends Message<Challenge> {
  /**
   * @generated from oneof chalgen.Challenge.type
   */
  type: {
    /**
     * @generated from field: chalgen.Base64 base64 = 6;
     */
    value: Base64;
    case: "base64";
  } | {
    /**
     * @generated from field: chalgen.Twitter twitter = 7;
     */
    value: Twitter;
    case: "twitter";
  } | {
    /**
     * @generated from field: chalgen.CaesarCipher caesar = 8;
     */
    value: CaesarCipher;
    case: "caesar";
  } | {
    /**
     * @generated from field: chalgen.PCAP pcap = 9;
     */
    value: PCAP;
    case: "pcap";
  } | {
    /**
     * @generated from field: chalgen.Exif exif = 10;
     */
    value: Exif;
    case: "exif";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Challenge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Challenge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "base64", kind: "message", T: Base64, oneof: "type" },
    { no: 7, name: "twitter", kind: "message", T: Twitter, oneof: "type" },
    { no: 8, name: "caesar", kind: "message", T: CaesarCipher, oneof: "type" },
    { no: 9, name: "pcap", kind: "message", T: PCAP, oneof: "type" },
    { no: 10, name: "exif", kind: "message", T: Exif, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Challenge {
    return new Challenge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Challenge {
    return new Challenge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Challenge {
    return new Challenge().fromJsonString(jsonString, options);
  }

  static equals(a: Challenge | PlainMessage<Challenge> | undefined, b: Challenge | PlainMessage<Challenge> | undefined): boolean {
    return proto3.util.equals(Challenge, a, b);
  }
}

/**
 * @generated from message chalgen.Exif
 */
export class Exif extends Message<Exif> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Exif>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Exif";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Exif {
    return new Exif().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Exif {
    return new Exif().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Exif {
    return new Exif().fromJsonString(jsonString, options);
  }

  static equals(a: Exif | PlainMessage<Exif> | undefined, b: Exif | PlainMessage<Exif> | undefined): boolean {
    return proto3.util.equals(Exif, a, b);
  }
}

/**
 * @generated from message chalgen.PCAP
 */
export class PCAP extends Message<PCAP> {
  /**
   * @generated from field: repeated chalgen.Packet packets = 1;
   */
  packets: Packet[] = [];

  constructor(data?: PartialMessage<PCAP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.PCAP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packets", kind: "message", T: Packet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PCAP {
    return new PCAP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PCAP {
    return new PCAP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PCAP {
    return new PCAP().fromJsonString(jsonString, options);
  }

  static equals(a: PCAP | PlainMessage<PCAP> | undefined, b: PCAP | PlainMessage<PCAP> | undefined): boolean {
    return proto3.util.equals(PCAP, a, b);
  }
}

/**
 * @generated from message chalgen.Packet
 */
export class Packet extends Message<Packet> {
  /**
   * @generated from field: int64 timestamp = 1;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: string source = 2;
   */
  source = "";

  /**
   * @generated from field: string destination = 3;
   */
  destination = "";

  /**
   * @generated from field: string protocol = 4;
   */
  protocol = "";

  /**
   * @generated from field: string data = 5;
   */
  data = "";

  constructor(data?: PartialMessage<Packet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Packet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Packet {
    return new Packet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Packet {
    return new Packet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Packet {
    return new Packet().fromJsonString(jsonString, options);
  }

  static equals(a: Packet | PlainMessage<Packet> | undefined, b: Packet | PlainMessage<Packet> | undefined): boolean {
    return proto3.util.equals(Packet, a, b);
  }
}

/**
 * @generated from message chalgen.CaesarCipher
 */
export class CaesarCipher extends Message<CaesarCipher> {
  /**
   * @generated from field: string plaintext = 1;
   */
  plaintext = "";

  /**
   * @generated from field: int32 shift = 2;
   */
  shift = 0;

  constructor(data?: PartialMessage<CaesarCipher>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.CaesarCipher";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plaintext", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shift", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaesarCipher {
    return new CaesarCipher().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaesarCipher {
    return new CaesarCipher().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaesarCipher {
    return new CaesarCipher().fromJsonString(jsonString, options);
  }

  static equals(a: CaesarCipher | PlainMessage<CaesarCipher> | undefined, b: CaesarCipher | PlainMessage<CaesarCipher> | undefined): boolean {
    return proto3.util.equals(CaesarCipher, a, b);
  }
}

/**
 * @generated from message chalgen.Base64
 */
export class Base64 extends Message<Base64> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<Base64>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Base64";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Base64 {
    return new Base64().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Base64 {
    return new Base64().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Base64 {
    return new Base64().fromJsonString(jsonString, options);
  }

  static equals(a: Base64 | PlainMessage<Base64> | undefined, b: Base64 | PlainMessage<Base64> | undefined): boolean {
    return proto3.util.equals(Base64, a, b);
  }
}

/**
 * @generated from message chalgen.Twitter
 */
export class Twitter extends Message<Twitter> {
  /**
   * @generated from field: repeated chalgen.User users = 1;
   */
  users: User[] = [];

  /**
   * @generated from field: repeated chalgen.Post posts = 2;
   */
  posts: Post[] = [];

  /**
   * @generated from field: repeated chalgen.Comment comments = 3;
   */
  comments: Comment[] = [];

  constructor(data?: PartialMessage<Twitter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Twitter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
    { no: 2, name: "posts", kind: "message", T: Post, repeated: true },
    { no: 3, name: "comments", kind: "message", T: Comment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Twitter {
    return new Twitter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Twitter {
    return new Twitter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Twitter {
    return new Twitter().fromJsonString(jsonString, options);
  }

  static equals(a: Twitter | PlainMessage<Twitter> | undefined, b: Twitter | PlainMessage<Twitter> | undefined): boolean {
    return proto3.util.equals(Twitter, a, b);
  }
}

/**
 * @generated from message chalgen.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string bio = 2;
   */
  bio = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * Post represents a user's post.
 *
 * @generated from message chalgen.Post
 */
export class Post extends Message<Post> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<Post>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Post";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Post {
    return new Post().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Post {
    return new Post().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Post {
    return new Post().fromJsonString(jsonString, options);
  }

  static equals(a: Post | PlainMessage<Post> | undefined, b: Post | PlainMessage<Post> | undefined): boolean {
    return proto3.util.equals(Post, a, b);
  }
}

/**
 * Comment represents a comment on a post.
 *
 * @generated from message chalgen.Comment
 */
export class Comment extends Message<Comment> {
  /**
   * @generated from field: int64 post_number = 1;
   */
  postNumber = protoInt64.zero;

  /**
   * @generated from field: int64 username = 2;
   */
  username = protoInt64.zero;

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<Comment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Comment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "post_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "username", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comment {
    return new Comment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJsonString(jsonString, options);
  }

  static equals(a: Comment | PlainMessage<Comment> | undefined, b: Comment | PlainMessage<Comment> | undefined): boolean {
    return proto3.util.equals(Comment, a, b);
  }
}

