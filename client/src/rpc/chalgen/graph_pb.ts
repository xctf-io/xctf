// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file chalgen/graph.proto (package chalgen, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Meta } from "../chals/config_pb.js";
import { Challenge } from "./base_pb.js";
import { PythonChallenge } from "../plugin/python_pb.js";

/**
 * @generated from message chalgen.CompetitionList
 */
export class CompetitionList extends Message<CompetitionList> {
  /**
   * @generated from field: repeated chalgen.Competition competitions = 1;
   */
  competitions: Competition[] = [];

  constructor(data?: PartialMessage<CompetitionList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.CompetitionList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "competitions", kind: "message", T: Competition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompetitionList {
    return new CompetitionList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompetitionList {
    return new CompetitionList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompetitionList {
    return new CompetitionList().fromJsonString(jsonString, options);
  }

  static equals(a: CompetitionList | PlainMessage<CompetitionList> | undefined, b: CompetitionList | PlainMessage<CompetitionList> | undefined): boolean {
    return proto3.util.equals(CompetitionList, a, b);
  }
}

/**
 * @generated from message chalgen.Competition
 */
export class Competition extends Message<Competition> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: chalgen.Graph graph = 3;
   */
  graph?: Graph;

  /**
   * @generated from field: bool active = 4;
   */
  active = false;

  constructor(data?: PartialMessage<Competition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Competition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "graph", kind: "message", T: Graph },
    { no: 4, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Competition {
    return new Competition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Competition {
    return new Competition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Competition {
    return new Competition().fromJsonString(jsonString, options);
  }

  static equals(a: Competition | PlainMessage<Competition> | undefined, b: Competition | PlainMessage<Competition> | undefined): boolean {
    return proto3.util.equals(Competition, a, b);
  }
}

/**
 * @generated from message chalgen.Graph
 */
export class Graph extends Message<Graph> {
  /**
   * @generated from field: repeated chalgen.Node nodes = 3;
   */
  nodes: Node[] = [];

  /**
   * @generated from field: repeated chalgen.Edge edges = 4;
   */
  edges: Edge[] = [];

  constructor(data?: PartialMessage<Graph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Graph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "nodes", kind: "message", T: Node, repeated: true },
    { no: 4, name: "edges", kind: "message", T: Edge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Graph {
    return new Graph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Graph {
    return new Graph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Graph {
    return new Graph().fromJsonString(jsonString, options);
  }

  static equals(a: Graph | PlainMessage<Graph> | undefined, b: Graph | PlainMessage<Graph> | undefined): boolean {
    return proto3.util.equals(Graph, a, b);
  }
}

/**
 * @generated from message chalgen.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: chals.Meta meta = 1;
   */
  meta?: Meta;

  /**
   * @generated from oneof chalgen.Node.challenge
   */
  challenge: {
    /**
     * @generated from field: chalgen.Challenge base = 10;
     */
    value: Challenge;
    case: "base";
  } | {
    /**
     * @generated from field: plugin.PythonChallenge python = 11;
     */
    value: PythonChallenge;
    case: "python";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: Meta },
    { no: 10, name: "base", kind: "message", T: Challenge, oneof: "challenge" },
    { no: 11, name: "python", kind: "message", T: PythonChallenge, oneof: "challenge" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message chalgen.Edge
 */
export class Edge extends Message<Edge> {
  /**
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * @generated from field: string to = 2;
   */
  to = "";

  constructor(data?: PartialMessage<Edge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chalgen.Edge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Edge {
    return new Edge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Edge {
    return new Edge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Edge {
    return new Edge().fromJsonString(jsonString, options);
  }

  static equals(a: Edge | PlainMessage<Edge> | undefined, b: Edge | PlainMessage<Edge> | undefined): boolean {
    return proto3.util.equals(Edge, a, b);
  }
}

